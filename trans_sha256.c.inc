/*=========================================================================================*/
/*                          This file was generated by "translater".                       */
/*=========================================================================================*/

#if !defined(__HELPERS_LOAD_ARRAY__)
#define __HELPERS_LOAD_ARRAY__
static void LOAD_ARRAY(DisasContext *ctx, TCGv rd, TCGv *array, int length, TCGv index_reg, int offset) {
	TCGv index = tcg_temp_new();
	tcg_gen_srai_tl(index, index_reg, 2);
	tcg_gen_addi_tl(index, index, offset);
	TCGLabel *local_labels[length];
	for(int i = 0; i < length; ++i) { local_labels[i] = gen_new_label(); }
	TCGLabel *local_end = gen_new_label();
	for(int i = 0; i < length; ++i) {
		tcg_gen_brcondi_tl(TCG_COND_EQ, index, i, local_labels[i]);
	}
	tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	for(int i = 0; i < length; ++i) {
		gen_set_label(local_labels[i]);
		tcg_gen_mov_tl(rd, array[i]);
		tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	}
}
#endif //!__HELPERS_LOAD_ARRAY__

#if !defined(__HELPERS_STORE_ARRAY__)
#define __HELPERS_STORE_ARRAY__
static void STORE_ARRAY(DisasContext *ctx, TCGv *array, int length, TCGv index_reg, int offset, TCGv rs) {
	TCGv index = tcg_temp_new();
	tcg_gen_srai_tl(index, index_reg, 2);
	tcg_gen_addi_tl(index, index, offset);
	TCGLabel *local_labels[length];
	for(int i = 0; i < length; ++i) { local_labels[i] = gen_new_label(); }
	TCGLabel *local_end = gen_new_label();
	for(int i = 0; i < length; ++i) {
		tcg_gen_brcondi_tl(TCG_COND_EQ, index, i, local_labels[i]);
	}
	tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	for(int i = 0; i < length; ++i) {
		gen_set_label(local_labels[i]);
		tcg_gen_mov_tl(array[i], rs);
		tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	}
}
#endif //!__HELPERS_STORE_ARRAY__

#if !defined(__HELPERS_LOAD_ARRAY_CONST__)
#define __HELPERS_LOAD_ARRAY_CONST__
static void LOAD_ARRAY_CONST(DisasContext *ctx, TCGv rd, const unsigned *array, int length, TCGv index_reg, int offset) {
	TCGv index = tcg_temp_new();
	tcg_gen_srai_tl(index, index_reg, 2);
	tcg_gen_addi_tl(index, index, offset);
	TCGLabel *local_labels[length];
	for(int i = 0; i < length; ++i) { local_labels[i] = gen_new_label(); }
	TCGLabel *local_end = gen_new_label();
	for(int i = 0; i < length; ++i) {
		tcg_gen_brcondi_tl(TCG_COND_EQ, index, i, local_labels[i]);
	}
	tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	for(int i = 0; i < length; ++i) {
		gen_set_label(local_labels[i]);
		tcg_gen_movi_tl(rd, array[i]);
		tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	}
}
#endif //!__HELPERS_LOAD_ARRAY_CONST__

static TCGv H[8], W[16], bytePos, dataID, dataOut, hidx, inBytes, m[8], memAddr, memAddrOut, memLoadDataIn, numBytes, numBytesOut, numWords, opOut, padState, pidx, state, tmpWord;
static const char H_name[][4] = {"H_0", "H_1", "H_2", "H_3", "H_4", "H_5", "H_6", "H_7", };
static const char W_name[][5] = {"W_0", "W_1", "W_2", "W_3", "W_4", "W_5", "W_6", "W_7", "W_8", "W_9", "W_10", "W_11", "W_12", "W_13", "W_14", "W_15", };
static const char m_name[][4] = {"m_0", "m_1", "m_2", "m_3", "m_4", "m_5", "m_6", "m_7", };

static void riscv_sha256_translate_init(void) {
	for(int i = 0; i < 8; ++i) {
		H[i] = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState,H[i]), H_name[i]);
	}
	for(int i = 0; i < 16; ++i) {
		W[i] = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState,W[i]), W_name[i]);
	}
	bytePos = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, bytePos), "bytePos");
	dataID = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, dataID), "dataID");
	dataOut = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, dataOut), "dataOut");
	hidx = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, hidx), "hidx");
	inBytes = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, inBytes), "inBytes");
	for(int i = 0; i < 8; ++i) {
		m[i] = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState,m[i]), m_name[i]);
	}
	memAddr = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, memAddr), "memAddr");
	memAddrOut = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, memAddrOut), "memAddrOut");
	memLoadDataIn = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, memLoadDataIn), "memLoadDataIn");
	numBytes = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, numBytes), "numBytes");
	numBytesOut = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, numBytesOut), "numBytesOut");
	numWords = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, numWords), "numWords");
	opOut = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, opOut), "opOut");
	padState = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, padState), "padState");
	pidx = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, pidx), "pidx");
	state = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, state), "state");
	tmpWord = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, tmpWord), "tmpWord");
}

static const unsigned H0[8] = { 
	0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19, 
};

static const unsigned K[64] = { 
	0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 
	0xe49b69c1, 0xefbe4786, 0xfc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x6ca6351, 0x14292967, 
	0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 
	0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2, 
};

static void convBigEndianWithStringTerminationPadding(DisasContext *ctx, TCGv r0, TCGv a0);
static void createPaddedInput(DisasContext *ctx, TCGv r0, TCGv a0);
static void computeHashCore(DisasContext *ctx, TCGv r0);
static void reset(DisasContext *ctx, TCGv r0);
static void setAddr(DisasContext *ctx, TCGv r0, TCGv a0, TCGv a1);
static void loadData(DisasContext *ctx, TCGv r0, TCGv a0);
static void storeData(DisasContext *ctx, TCGv r0);
static void computeHash(DisasContext *ctx, TCGv r0);

static void convBigEndianWithStringTerminationPadding(DisasContext *ctx, TCGv r0, TCGv a0) {
	TCGLabel *label_BB0_1 = gen_new_label();
	TCGLabel *label_BB0_2 = gen_new_label();
	TCGLabel *label_BB0_3 = gen_new_label();
	TCGLabel *label_BB0_4 = gen_new_label();
	TCGLabel *label_BB0_5 = gen_new_label();
	TCGLabel *label_BB0_6 = gen_new_label();
	TCGLabel *label_BB0_7 = gen_new_label();
	TCGLabel *label_BB0_8 = gen_new_label();
	TCGLabel *label_BB0_9 = gen_new_label();
	TCGLabel *label_BB0_10 = gen_new_label();
	TCGLabel *label_BB0_11 = gen_new_label();
	TCGLabel *label_BB0_12 = gen_new_label();
	TCGLabel *label_BB0_13 = gen_new_label();
	TCGLabel *label_BB0_14 = gen_new_label();
	TCGLabel *label_BB0_15 = gen_new_label();
	TCGLabel *label_BB0_16 = gen_new_label();
	TCGLabel *end_label = gen_new_label();

	TCGv tmp1 = tcg_temp_new();
	TCGv tmp2 = tcg_temp_new();
	TCGv tmp3 = tcg_temp_new();

	TCGv sp[6]; for(int i = 0; i < 6; ++i) { sp[i] = tcg_temp_new(); }

	tcg_gen_mov_tl(sp[5], a0);
	tcg_gen_movi_tl(tmp1, 0);
	tcg_gen_mov_tl(sp[4], tmp1);
	tcg_gen_mov_tl(sp[3], tmp1);
	tcg_gen_mov_tl(sp[2], tmp1);
	tcg_gen_mov_tl(sp[1], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_1);
	
	gen_set_label(label_BB0_1);
	tcg_gen_mov_tl(tmp1, sp[1]);
	tcg_gen_brcondi_tl(TCG_COND_GT, tmp1, 3, label_BB0_13);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_2);
	
	gen_set_label(label_BB0_2);
	tcg_gen_mov_tl(tmp1, sp[5]);
	tcg_gen_mov_tl(tmp2, sp[1]);
	tcg_gen_shli_tl(tmp2, tmp2, 3);
	tcg_gen_shr_tl(tmp1, tmp1, tmp2);
	tcg_gen_andi_tl(tmp1, tmp1, 255);
	tcg_gen_mov_tl(sp[0], tmp1);
	tcg_gen_mov_tl(tmp1, sp[3]);
	tcg_gen_shli_tl(tmp1, tmp1, 8);
	tcg_gen_mov_tl(tmp2, sp[4]);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp2, 0, label_BB0_4);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_3);
	
	gen_set_label(label_BB0_3);
	tcg_gen_movi_tl(tmp2, 0);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_8);
	
	gen_set_label(label_BB0_4);
	tcg_gen_mov_tl(tmp2, sp[0]);
	tcg_gen_brcondi_tl(TCG_COND_NE, tmp2, 0, label_BB0_6);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_5);
	
	gen_set_label(label_BB0_5);
	tcg_gen_movi_tl(tmp2, 128);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_7);
	
	gen_set_label(label_BB0_6);
	tcg_gen_mov_tl(tmp2, sp[0]);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_7);
	
	gen_set_label(label_BB0_7);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_8);
	
	gen_set_label(label_BB0_8);
	tcg_gen_or_tl(tmp1, tmp1, tmp2);
	tcg_gen_mov_tl(sp[3], tmp1);
	tcg_gen_mov_tl(tmp1, sp[4]);
	tcg_gen_brcondi_tl(TCG_COND_NE, tmp1, 0, label_BB0_11);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_9);
	
	gen_set_label(label_BB0_9);
	tcg_gen_mov_tl(tmp1, sp[0]);
	tcg_gen_brcondi_tl(TCG_COND_NE, tmp1, 0, label_BB0_11);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_10);
	
	gen_set_label(label_BB0_10);
	tcg_gen_mov_tl(tmp1, sp[1]);
	tcg_gen_mov_tl(tmp2, sp[2]);
	tcg_gen_add_tl(tmp1, tmp2, tmp1);
	tcg_gen_mov_tl(sp[2], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_11);
	
	gen_set_label(label_BB0_11);
	tcg_gen_mov_tl(tmp1, sp[0]);
	tcg_gen_setcondi_tl(TCG_COND_EQ, tmp1, tmp1, 0);
	tcg_gen_andi_tl(tmp1, tmp1, 1);
	tcg_gen_mov_tl(tmp2, sp[4]);
	tcg_gen_or_tl(tmp1, tmp2, tmp1);
	tcg_gen_mov_tl(sp[4], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_12);
	
	gen_set_label(label_BB0_12);
	tcg_gen_mov_tl(tmp1, sp[1]);
	tcg_gen_addi_tl(tmp1, tmp1, 1);
	tcg_gen_mov_tl(sp[1], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_1);
	
	gen_set_label(label_BB0_13);
	tcg_gen_mov_tl(tmp1, sp[4]);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp1, 0, label_BB0_15);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_14);
	
	gen_set_label(label_BB0_14);
	/*Assign padState to tmp1.*/
	tcg_gen_movi_tl(tmp2, 1);
	tcg_gen_mov_tl(padState[0], tmp2);
	tcg_gen_mov_tl(tmp1, sp[2]);
	/*Assign inBytes to tmp2.*/
	tcg_gen_mov_tl(tmp3, inBytes[0]);
	tcg_gen_add_tl(tmp1, tmp3, tmp1);
	tcg_gen_mov_tl(inBytes[0], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_16);
	
	gen_set_label(label_BB0_15);
	/*Assign inBytes to tmp1.*/
	tcg_gen_mov_tl(tmp2, inBytes[0]);
	tcg_gen_addi_tl(tmp2, tmp2, 4);
	tcg_gen_mov_tl(inBytes[0], tmp2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_16);
	
	gen_set_label(label_BB0_16);
	tcg_gen_mov_tl(r0, sp[3]);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, end_label);

	gen_set_label(end_label);
}

static void createPaddedInput(DisasContext *ctx, TCGv r0, TCGv a0) {
	TCGLabel *label_BB1_1 = gen_new_label();
	TCGLabel *label_BB1_2 = gen_new_label();
	TCGLabel *label_BB1_3 = gen_new_label();
	TCGLabel *label_BB1_4 = gen_new_label();
	TCGLabel *label_BB1_5 = gen_new_label();
	TCGLabel *label_BB1_6 = gen_new_label();
	TCGLabel *label_BB1_7 = gen_new_label();
	TCGLabel *label_BB1_8 = gen_new_label();
	TCGLabel *label_BB1_9 = gen_new_label();
	TCGLabel *end_label = gen_new_label();

	TCGv tmp1 = tcg_temp_new();
	TCGv tmp2 = tcg_temp_new();
	TCGv tmp3 = tcg_temp_new();

	TCGv sp[4]; for(int i = 0; i < 4; ++i) { sp[i] = tcg_temp_new(); }

	tcg_gen_mov_tl(sp[3], ra);
	tcg_gen_mov_tl(sp[2], a0);
	/*Assign pidx to tmp1.*/
	tcg_gen_mov_tl(tmp1, pidx[0]);
	tcg_gen_setcondi_tl(TCG_COND_EQ, tmp1, tmp1, 15);
	tcg_gen_andi_tl(tmp1, tmp1, 1);
	tcg_gen_mov_tl(sp[0], tmp1);
	/*Assign padState to tmp1.*/
	tcg_gen_mov_tl(tmp1, padState[0]);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp1, 0, label_BB1_5);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_1);
	
	gen_set_label(label_BB1_1);
	tcg_gen_mov_tl(tmp1, sp[0]);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp1, 0, label_BB1_3);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_2);
	
	gen_set_label(label_BB1_2);
	/*Assign inBytes to tmp1.*/
	tcg_gen_mov_tl(tmp1, inBytes[0]);
	tcg_gen_shli_tl(tmp1, tmp1, 3);
	tcg_gen_mov_tl(sp[1], tmp1);
	/*Assign padState to tmp1.*/
	tcg_gen_movi_tl(tmp2, 2);
	tcg_gen_mov_tl(padState[0], tmp2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_4);
	
	gen_set_label(label_BB1_3);
	tcg_gen_movi_tl(tmp1, 0);
	tcg_gen_mov_tl(sp[1], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_4);
	
	gen_set_label(label_BB1_4);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_6);
	
	gen_set_label(label_BB1_5);
	tcg_gen_mov_tl(a0, sp[2]);
	convBigEndianWithStringTerminationPadding(ctx, r0, a0);
	tcg_gen_mov_tl(sp[1], r0);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_6);
	
	gen_set_label(label_BB1_6);
	tcg_gen_mov_tl(tmp1, sp[1]);
	/*Assign pidx to tmp2.*/
	tcg_gen_mov_tl(tmp2, pidx[0]);
	tcg_gen_shli_tl(tmp2, tmp2, 2);
	/*Assign W to tmp3.*/
	/*Assign W[tmp2] to tmp2.*/

	/*ARRAY ACCESS*/
	STORE_ARRAY(ctx, W, 16, tmp2, 0, tmp1);
	/*End ARRAY ACCESS*/

	tcg_gen_mov_tl(tmp1, sp[0]);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp1, 0, label_BB1_8);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_7);
	
	gen_set_label(label_BB1_7);
	tcg_gen_movi_tl(tmp1, 0);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_9);
	
	gen_set_label(label_BB1_8);
	/*Assign pidx to tmp1.*/
	tcg_gen_mov_tl(tmp1, pidx[0]);
	tcg_gen_addi_tl(tmp1, tmp1, 1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_9);
	
	gen_set_label(label_BB1_9);
	/*Assign pidx to tmp2.*/
	tcg_gen_mov_tl(pidx[0], tmp1);
	tcg_gen_mov_tl(r0, sp[0]);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, end_label);

	gen_set_label(end_label);
}

static void computeHashCore(DisasContext *ctx, TCGv r0) {
	TCGLabel *label_BB2_1 = gen_new_label();
	TCGLabel *label_BB2_2 = gen_new_label();
	TCGLabel *label_BB2_3 = gen_new_label();
	TCGLabel *label_BB2_4 = gen_new_label();
	TCGLabel *label_BB2_5 = gen_new_label();
	TCGLabel *label_BB2_6 = gen_new_label();
	TCGLabel *end_label = gen_new_label();

	TCGv tmp1 = tcg_temp_new();
	TCGv tmp2 = tcg_temp_new();
	TCGv tmp3 = tcg_temp_new();
	TCGv tmp4 = tcg_temp_new();
	TCGv tmp5 = tcg_temp_new();
	TCGv tmp6 = tcg_temp_new();

	TCGv sp[5]; for(int i = 0; i < 5; ++i) { sp[i] = tcg_temp_new(); }

	/*Assign hidx to tmp1.*/
	tcg_gen_mov_tl(tmp2, hidx[0]);
	tcg_gen_mov_tl(sp[3], tmp2);
	tcg_gen_mov_tl(tmp1, hidx[0]);
	tcg_gen_brcondi_tl(TCG_COND_GTU, tmp1, 15, label_BB2_2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_1);
	
	gen_set_label(label_BB2_1);
	tcg_gen_mov_tl(tmp1, sp[3]);
	tcg_gen_shli_tl(tmp1, tmp1, 2);
	/*Assign W to tmp2.*/
	/*Assign W[tmp1] to tmp1.*/

	/*ARRAY ACCESS*/
	LOAD_ARRAY(ctx, tmp1, W, 16, tmp1, 0);
	/*End ARRAY ACCESS*/

	tcg_gen_mov_tl(sp[4], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_3);
	
	gen_set_label(label_BB2_2);
	tcg_gen_mov_tl(tmp1, sp[3]);
	tcg_gen_shli_tl(tmp1, tmp1, 2);
	/*Assign W to tmp2.*/
	/*Assign W[tmp1] to tmp1.*/

	/*ARRAY ACCESS*/
	LOAD_ARRAY(ctx, tmp3, W, 16, tmp1, -2);
	/*End ARRAY ACCESS*/

	tcg_gen_rotli_tl(tmp4, tmp3, 15);
	tcg_gen_rotli_tl(tmp5, tmp3, 13);
	tcg_gen_xor_tl(tmp4, tmp4, tmp5);
	tcg_gen_shri_tl(tmp3, tmp3, 10);
	tcg_gen_xor_tl(tmp3, tmp4, tmp3);

	/*ARRAY ACCESS*/
	LOAD_ARRAY(ctx, tmp4, W, 16, tmp1, -7);
	/*End ARRAY ACCESS*/

	tcg_gen_add_tl(tmp3, tmp3, tmp4);

	/*ARRAY ACCESS*/
	LOAD_ARRAY(ctx, tmp4, W, 16, tmp1, -15);
	/*End ARRAY ACCESS*/

	tcg_gen_rotli_tl(tmp5, tmp4, 25);
	tcg_gen_rotli_tl(tmp6, tmp4, 14);
	tcg_gen_xor_tl(tmp5, tmp5, tmp6);
	tcg_gen_shri_tl(tmp4, tmp4, 3);
	tcg_gen_xor_tl(tmp4, tmp5, tmp4);
	tcg_gen_add_tl(tmp3, tmp3, tmp4);

	/*ARRAY ACCESS*/
	LOAD_ARRAY(ctx, tmp1, W, 16, tmp1, -16);
	/*End ARRAY ACCESS*/

	tcg_gen_add_tl(tmp1, tmp3, tmp1);
	tcg_gen_mov_tl(sp[4], tmp1);
	tcg_gen_mov_tl(tmp1, sp[4]);
	tcg_gen_mov_tl(tmp3, sp[3]);
	tcg_gen_shli_tl(tmp3, tmp3, 2);
	/*Assign W[tmp3] to tmp2.*/

	/*ARRAY ACCESS*/
	STORE_ARRAY(ctx, W, 16, tmp3, 0, tmp1);
	/*End ARRAY ACCESS*/

	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_3);
	
	gen_set_label(label_BB2_3);
	/*Assign m to tmp1.*/
	tcg_gen_mov_tl(tmp2, m[7]);
	tcg_gen_mov_tl(tmp3, m[4]);
	tcg_gen_rotli_tl(tmp4, tmp3, 26);
	tcg_gen_rotli_tl(tmp5, tmp3, 21);
	tcg_gen_xor_tl(tmp4, tmp4, tmp5);
	tcg_gen_rotli_tl(tmp5, tmp3, 7);
	tcg_gen_xor_tl(tmp4, tmp4, tmp5);
	tcg_gen_add_tl(tmp2, tmp2, tmp4);
	tcg_gen_mov_tl(tmp4, m[5]);
	tcg_gen_and_tl(tmp4, tmp3, tmp4);
	tcg_gen_xori_tl(tmp3, tmp3, -1);
	tcg_gen_mov_tl(tmp5, m[6]);
	tcg_gen_and_tl(tmp3, tmp3, tmp5);
	tcg_gen_xor_tl(tmp3, tmp4, tmp3);
	tcg_gen_add_tl(tmp2, tmp2, tmp3);
	tcg_gen_mov_tl(tmp3, sp[3]);
	tcg_gen_shli_tl(tmp3, tmp3, 2);
	/*Assign K to tmp4.*/
	/*Assign K[tmp3] to tmp3.*/

	/*ARRAY ACCESS*/
	LOAD_ARRAY_CONST(ctx, tmp3, K, 64, tmp3, 0);
	/*End ARRAY ACCESS*/

	tcg_gen_add_tl(tmp2, tmp2, tmp3);
	tcg_gen_mov_tl(tmp3, sp[4]);
	tcg_gen_add_tl(tmp2, tmp2, tmp3);
	tcg_gen_mov_tl(sp[2], tmp2);
	tcg_gen_mov_tl(tmp2, m[0]);
	tcg_gen_rotli_tl(tmp3, tmp2, 30);
	tcg_gen_rotli_tl(tmp4, tmp2, 19);
	tcg_gen_xor_tl(tmp3, tmp3, tmp4);
	tcg_gen_rotli_tl(tmp4, tmp2, 10);
	tcg_gen_xor_tl(tmp3, tmp3, tmp4);
	tcg_gen_mov_tl(tmp4, m[1]);
	tcg_gen_and_tl(tmp5, tmp2, tmp4);
	tcg_gen_mov_tl(tmp6, m[2]);
	tcg_gen_and_tl(tmp2, tmp2, tmp6);
	tcg_gen_xor_tl(tmp2, tmp5, tmp2);
	tcg_gen_and_tl(tmp4, tmp4, tmp6);
	tcg_gen_xor_tl(tmp2, tmp2, tmp4);
	tcg_gen_add_tl(tmp2, tmp3, tmp2);
	tcg_gen_mov_tl(sp[1], tmp2);
	tcg_gen_mov_tl(tmp2, m[6]);
	tcg_gen_mov_tl(m[7], tmp2);
	tcg_gen_mov_tl(tmp2, m[5]);
	tcg_gen_mov_tl(m[6], tmp2);
	tcg_gen_mov_tl(tmp2, m[4]);
	tcg_gen_mov_tl(m[5], tmp2);
	tcg_gen_mov_tl(tmp2, m[3]);
	tcg_gen_mov_tl(tmp3, sp[2]);
	tcg_gen_add_tl(tmp2, tmp2, tmp3);
	tcg_gen_mov_tl(m[4], tmp2);
	tcg_gen_mov_tl(tmp2, m[2]);
	tcg_gen_mov_tl(m[3], tmp2);
	tcg_gen_mov_tl(tmp2, m[1]);
	tcg_gen_mov_tl(m[2], tmp2);
	tcg_gen_mov_tl(tmp2, m[0]);
	tcg_gen_mov_tl(m[1], tmp2);
	tcg_gen_mov_tl(tmp2, sp[2]);
	tcg_gen_mov_tl(tmp3, sp[1]);
	tcg_gen_add_tl(tmp2, tmp2, tmp3);
	tcg_gen_mov_tl(m[0], tmp2);
	/*Assign hidx to tmp1.*/
	tcg_gen_mov_tl(tmp1, hidx[0]);
	tcg_gen_setcondi_tl(TCG_COND_EQ, tmp1, tmp1, 63);
	tcg_gen_andi_tl(tmp1, tmp1, 1);
	tcg_gen_mov_tl(sp[0], tmp1);
	tcg_gen_mov_tl(tmp1, sp[0]);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp1, 0, label_BB2_5);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_4);
	
	gen_set_label(label_BB2_4);
	tcg_gen_movi_tl(tmp1, 0);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_6);
	
	gen_set_label(label_BB2_5);
	/*Assign hidx to tmp1.*/
	tcg_gen_mov_tl(tmp1, hidx[0]);
	tcg_gen_addi_tl(tmp1, tmp1, 1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_6);
	
	gen_set_label(label_BB2_6);
	/*Assign hidx to tmp2.*/
	tcg_gen_mov_tl(hidx[0], tmp1);
	tcg_gen_mov_tl(r0, sp[0]);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, end_label);

	gen_set_label(end_label);
}

static void reset(DisasContext *ctx, TCGv r0) {
	TCGLabel *label_BB3_1 = gen_new_label();
	TCGLabel *label_BB3_2 = gen_new_label();
	TCGLabel *label_BB3_3 = gen_new_label();
	TCGLabel *label_BB3_4 = gen_new_label();
	TCGLabel *end_label = gen_new_label();

	TCGv tmp1 = tcg_temp_new();
	TCGv tmp2 = tcg_temp_new();
	TCGv tmp3 = tcg_temp_new();

	TCGv sp[1]; for(int i = 0; i < 1; ++i) { sp[i] = tcg_temp_new(); }

	/*Assign pidx to tmp1.*/
	tcg_gen_movi_tl(tmp2, 0);
	tcg_gen_mov_tl(pidx[0], tmp2);
	/*Assign padState to tmp1.*/
	tcg_gen_mov_tl(padState[0], tmp2);
	/*Assign state to tmp1.*/
	tcg_gen_mov_tl(state[0], tmp2);
	/*Assign tmpWord to tmp1.*/
	tcg_gen_mov_tl(tmpWord[0], tmp2);
	tcg_gen_mov_tl(sp[0], tmp2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB3_1);
	
	gen_set_label(label_BB3_1);
	tcg_gen_mov_tl(tmp1, sp[0]);
	tcg_gen_brcondi_tl(TCG_COND_GT, tmp1, 7, label_BB3_4);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB3_2);
	
	gen_set_label(label_BB3_2);
	tcg_gen_mov_tl(tmp1, sp[0]);
	tcg_gen_shli_tl(tmp1, tmp1, 2);
	/*Assign H0 to tmp2.*/
	/*Assign H0[tmp1] to tmp2.*/

	/*ARRAY ACCESS*/
	LOAD_ARRAY_CONST(ctx, tmp2, H0, 8, tmp1, 0);
	/*End ARRAY ACCESS*/

	/*Assign H to tmp3.*/
	/*Assign H[tmp1] to tmp1.*/

	/*ARRAY ACCESS*/
	STORE_ARRAY(ctx, H, 8, tmp1, 0, tmp2);
	/*End ARRAY ACCESS*/

	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB3_3);
	
	gen_set_label(label_BB3_3);
	tcg_gen_mov_tl(tmp1, sp[0]);
	tcg_gen_addi_tl(tmp1, tmp1, 1);
	tcg_gen_mov_tl(sp[0], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB3_1);
	
	gen_set_label(label_BB3_4);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, end_label);

	gen_set_label(end_label);
}

static void setAddr(DisasContext *ctx, TCGv r0, TCGv a0, TCGv a1) {
	TCGLabel *label_BB4_1 = gen_new_label();
	TCGLabel *label_BB4_2 = gen_new_label();
	TCGLabel *label_BB4_3 = gen_new_label();
	TCGLabel *label_BB4_4 = gen_new_label();
	TCGLabel *label_BB4_5 = gen_new_label();
	TCGLabel *end_label = gen_new_label();

	TCGv tmp1 = tcg_temp_new();
	TCGv tmp2 = tcg_temp_new();
	TCGv tmp3 = tcg_temp_new();

	TCGv sp[2]; for(int i = 0; i < 2; ++i) { sp[i] = tcg_temp_new(); }

	tcg_gen_mov_tl(sp[1], a0);
	tcg_gen_mov_tl(sp[0], a1);
	tcg_gen_mov_tl(tmp1, sp[1]);
	/*Assign memAddr to tmp2.*/
	tcg_gen_mov_tl(memAddr[0], tmp1);
	tcg_gen_mov_tl(tmp1, sp[1]);
	tcg_gen_andi_tl(tmp1, tmp1, 3);
	/*Assign bytePos to tmp2.*/
	tcg_gen_mov_tl(bytePos[0], tmp1);
	/*Assign pidx to tmp1.*/
	tcg_gen_movi_tl(tmp2, 0);
	tcg_gen_mov_tl(pidx[0], tmp2);
	tcg_gen_mov_tl(tmp1, sp[0]);
	/*Assign dataID to tmp3.*/
	tcg_gen_mov_tl(dataID[0], tmp1);
	/*Assign state to tmp1.*/
	tcg_gen_mov_tl(state[0], tmp2);
	tcg_gen_mov_tl(tmp1, sp[0]);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp1, 0, label_BB4_2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB4_1);
	
	gen_set_label(label_BB4_1);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp1, 1, label_BB4_3);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB4_4);
	
	gen_set_label(label_BB4_2);
	/*Assign numWords to tmp1.*/
	tcg_gen_movi_tl(tmp2, 8);
	tcg_gen_mov_tl(numWords[0], tmp2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB4_5);
	
	gen_set_label(label_BB4_3);
	/*Assign numWords to tmp1.*/
	tcg_gen_movi_tl(tmp2, 16);
	tcg_gen_mov_tl(numWords[0], tmp2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB4_5);
	
	gen_set_label(label_BB4_4);
	/*Assign numWords to tmp1.*/
	tcg_gen_movi_tl(tmp2, 8);
	tcg_gen_mov_tl(numWords[0], tmp2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB4_5);
	
	gen_set_label(label_BB4_5);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, end_label);

	gen_set_label(end_label);
}

static void loadData(DisasContext *ctx, TCGv r0, TCGv a0) {
	TCGLabel *label_BB5_1 = gen_new_label();
	TCGLabel *label_BB5_2 = gen_new_label();
	TCGLabel *label_BB5_3 = gen_new_label();
	TCGLabel *label_BB5_4 = gen_new_label();
	TCGLabel *label_BB5_5 = gen_new_label();
	TCGLabel *label_BB5_6 = gen_new_label();
	TCGLabel *label_BB5_7 = gen_new_label();
	TCGLabel *label_BB5_8 = gen_new_label();
	TCGLabel *label_BB5_9 = gen_new_label();
	TCGLabel *label_BB5_10 = gen_new_label();
	TCGLabel *label_BB5_11 = gen_new_label();
	TCGLabel *label_BB5_12 = gen_new_label();
	TCGLabel *label_BB5_13 = gen_new_label();
	TCGLabel *label_BB5_14 = gen_new_label();
	TCGLabel *label_BB5_15 = gen_new_label();
	TCGLabel *label_BB5_16 = gen_new_label();
	TCGLabel *label_BB5_17 = gen_new_label();
	TCGLabel *label_BB5_19 = gen_new_label();
	TCGLabel *label_BB5_20 = gen_new_label();
	TCGLabel *end_label = gen_new_label();

	TCGv tmp1 = tcg_temp_new();
	TCGv tmp2 = tcg_temp_new();
	TCGv tmp3 = tcg_temp_new();
	TCGv tmp4 = tcg_temp_new();
	TCGv tmp5 = tcg_temp_new();

	TCGv sp[8]; for(int i = 0; i < 8; ++i) { sp[i] = tcg_temp_new(); }

	tcg_gen_mov_tl(sp[7], ra);
	tcg_gen_mov_tl(sp[6], a0);
	tcg_gen_movi_tl(tmp1, 0);
	tcg_gen_mov_tl(sp[5], tmp1);
	/*Assign state to tmp1.*/
	tcg_gen_mov_tl(tmp1, state[0]);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp1, 0, label_BB5_15);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB5_1);
	
	gen_set_label(label_BB5_1);
	/*Assign numBytes to tmp1.*/
	tcg_gen_mov_tl(tmp1, numBytes[0]);
	tcg_gen_brcondi_tl(TCG_COND_NE, tmp1, 1, label_BB5_3);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB5_2);
	
	gen_set_label(label_BB5_2);
	/*Assign tmpWord to tmp1.*/
	tcg_gen_mov_tl(tmp2, tmpWord[0]);
	tcg_gen_shri_tl(tmp2, tmp2, 8);
	tcg_gen_mov_tl(tmp3, sp[6]);
	tcg_gen_shli_tl(tmp3, tmp3, 24);
	tcg_gen_or_tl(tmp2, tmp2, tmp3);
	tcg_gen_mov_tl(tmpWord[0], tmp2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB5_14);
	
	gen_set_label(label_BB5_3);
	/*Assign bytePos to tmp1.*/
	tcg_gen_mov_tl(tmp2, bytePos[0]);
	tcg_gen_shli_tl(tmp2, tmp2, 3);
	tcg_gen_mov_tl(sp[4], tmp2);
	tcg_gen_mov_tl(tmp2, bytePos[0]);
	tcg_gen_movi_tl(tmp3, 4);
	tcg_gen_sub_tl(tmp2, tmp3, tmp2);
	tcg_gen_shli_tl(tmp2, tmp2, 3);
	tcg_gen_mov_tl(sp[3], tmp2);
	tcg_gen_mov_tl(tmp1, bytePos[0]);
	tcg_gen_brcondi_tl(TCG_COND_NE, tmp1, 0, label_BB5_5);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB5_4);
	
	gen_set_label(label_BB5_4);
	tcg_gen_mov_tl(tmp1, sp[6]);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB5_6);
	
	gen_set_label(label_BB5_5);
	/*Assign tmpWord to tmp1.*/
	tcg_gen_mov_tl(tmp1, tmpWord[0]);
	tcg_gen_mov_tl(tmp2, sp[4]);
	tcg_gen_shr_tl(tmp1, tmp1, tmp2);
	tcg_gen_mov_tl(tmp2, sp[6]);
	tcg_gen_mov_tl(tmp3, sp[3]);
	tcg_gen_shl_tl(tmp2, tmp2, tmp3);
	tcg_gen_or_tl(tmp1, tmp1, tmp2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB5_6);
	
	gen_set_label(label_BB5_6);
	tcg_gen_mov_tl(sp[2], tmp1);
	tcg_gen_mov_tl(tmp1, sp[6]);
	/*Assign tmpWord to tmp2.*/
	tcg_gen_mov_tl(tmpWord[0], tmp1);
	/*Assign dataID to tmp1.*/
	tcg_gen_mov_tl(tmp1, dataID[0]);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp1, 0, label_BB5_8);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB5_7);
	
	gen_set_label(label_BB5_7);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp1, 1, label_BB5_9);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB5_12);
	
	gen_set_label(label_BB5_8);
	tcg_gen_mov_tl(tmp1, sp[2]);
	/*Assign pidx to tmp2.*/
	tcg_gen_mov_tl(tmp3, pidx[0]);
	tcg_gen_addi_tl(tmp4, tmp3, 1);
	tcg_gen_mov_tl(pidx[0], tmp4);
	tcg_gen_shli_tl(tmp2, tmp3, 2);
	/*Assign H to tmp3.*/
	/*Assign H[tmp2] to tmp2.*/

	/*ARRAY ACCESS*/
	STORE_ARRAY(ctx, H, 8, tmp2, 0, tmp1);
	/*End ARRAY ACCESS*/

	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB5_13);
	
	gen_set_label(label_BB5_9);
	tcg_gen_mov_tl(a0, sp[2]);
	createPaddedInput(ctx, r0, a0);
	tcg_gen_brcondi_tl(TCG_COND_EQ, r0, 0, label_BB5_11);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB5_10);
	
	gen_set_label(label_BB5_10);
	tcg_gen_movi_tl(tmp1, 1);
	tcg_gen_mov_tl(sp[5], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB5_11);
	
	gen_set_label(label_BB5_11);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB5_13);
	
	gen_set_label(label_BB5_12);
	tcg_gen_mov_tl(tmp1, sp[2]);
	/*Assign pidx to tmp2.*/
	tcg_gen_mov_tl(tmp3, pidx[0]);
	tcg_gen_addi_tl(tmp4, tmp3, 1);
	tcg_gen_mov_tl(pidx[0], tmp4);
	tcg_gen_shli_tl(tmp2, tmp3, 2);
	/*Assign m to tmp3.*/
	/*Assign m[tmp2] to tmp2.*/

	/*ARRAY ACCESS*/
	STORE_ARRAY(ctx, m, 8, tmp2, 0, tmp1);
	/*End ARRAY ACCESS*/

	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB5_13);
	
	gen_set_label(label_BB5_13);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB5_14);
	
	gen_set_label(label_BB5_14);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB5_15);
	
	gen_set_label(label_BB5_15);
	tcg_gen_mov_tl(tmp1, sp[5]);
	tcg_gen_andi_tl(tmp1, tmp1, 1);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp1, 0, label_BB5_17);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB5_16);
	
	gen_set_label(label_BB5_16);
	/*Assign dataOut to tmp1.*/
	tcg_gen_movi_tl(tmp2, 1);
	tcg_gen_mov_tl(dataOut[0], tmp2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB5_20);
	
	gen_set_label(label_BB5_17);
	/*Assign memAddr to tmp1.*/
	tcg_gen_mov_tl(tmp2, memAddr[0]);
	/*Assign memAddrOut to tmp3.*/
	tcg_gen_mov_tl(memAddrOut[0], tmp2);
	tcg_gen_mov_tl(tmp2, memAddr[0]);
	tcg_gen_andi_tl(tmp2, tmp2, 3);
	tcg_gen_setcondi_tl(TCG_COND_NE, tmp4, tmp2, 0);
	tcg_gen_movi_tl(tmp3, 4);
	tcg_gen_movi_tl(tmp2, 1);
	tcg_gen_movi_tl(tmp5, 0);
	tcg_gen_brcond_tl(TCG_COND_NE, tmp4, tmp5, label_BB5_19);
	tcg_gen_movi_tl(tmp2, tmp3);
	
	gen_set_label(label_BB5_19);
	/*Assign numBytesOut to tmp3.*/
	tcg_gen_mov_tl(numBytesOut[0], tmp2);
	tcg_gen_mov_tl(tmp2, numBytesOut[0]);
	tcg_gen_mov_tl(tmp4, memAddr[0]);
	tcg_gen_add_tl(tmp2, tmp4, tmp2);
	tcg_gen_mov_tl(memAddr[0], tmp2);
	/*Assign opOut to tmp1.*/
	tcg_gen_movi_tl(tmp2, 6);
	tcg_gen_mov_tl(opOut[0], tmp2);
	tcg_gen_mov_tl(tmp1, numBytesOut[0]);
	/*Assign numBytes to tmp2.*/
	tcg_gen_mov_tl(numBytes[0], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB5_20);
	
	gen_set_label(label_BB5_20);
	tcg_gen_mov_tl(tmp1, sp[5]);
	tcg_gen_xori_tl(tmp1, tmp1, -1);
	tcg_gen_andi_tl(tmp1, tmp1, 1);
	/*Assign state to tmp2.*/
	tcg_gen_mov_tl(state[0], tmp1);
	tcg_gen_mov_tl(tmp1, sp[5]);
	tcg_gen_andi_tl(r0, tmp1, 1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, end_label);

	gen_set_label(end_label);
}

static void storeData(DisasContext *ctx, TCGv r0) {
	TCGLabel *label_BB6_1 = gen_new_label();
	TCGLabel *label_BB6_2 = gen_new_label();
	TCGLabel *label_BB6_3 = gen_new_label();
	TCGLabel *label_BB6_4 = gen_new_label();
	TCGLabel *label_BB6_5 = gen_new_label();
	TCGLabel *label_BB6_6 = gen_new_label();
	TCGLabel *label_BB6_7 = gen_new_label();
	TCGLabel *label_BB6_9 = gen_new_label();
	TCGLabel *label_BB6_10 = gen_new_label();
	TCGLabel *label_BB6_11 = gen_new_label();
	TCGLabel *label_BB6_12 = gen_new_label();
	TCGLabel *label_BB6_13 = gen_new_label();
	TCGLabel *label_BB6_14 = gen_new_label();
	TCGLabel *label_BB6_15 = gen_new_label();
	TCGLabel *label_BB6_16 = gen_new_label();
	TCGLabel *label_BB6_17 = gen_new_label();
	TCGLabel *label_BB6_18 = gen_new_label();
	TCGLabel *label_BB6_19 = gen_new_label();
	TCGLabel *label_BB6_20 = gen_new_label();
	TCGLabel *label_BB6_21 = gen_new_label();
	TCGLabel *label_BB6_22 = gen_new_label();
	TCGLabel *label_BB6_23 = gen_new_label();
	TCGLabel *label_BB6_25 = gen_new_label();
	TCGLabel *label_BB6_26 = gen_new_label();
	TCGLabel *end_label = gen_new_label();

	TCGv tmp1 = tcg_temp_new();
	TCGv tmp2 = tcg_temp_new();
	TCGv tmp3 = tcg_temp_new();
	TCGv tmp4 = tcg_temp_new();
	TCGv tmp5 = tcg_temp_new();

	TCGv sp[6]; for(int i = 0; i < 6; ++i) { sp[i] = tcg_temp_new(); }

	/*Assign state to tmp1.*/
	tcg_gen_mov_tl(tmp1, state[0]);
	tcg_gen_brcondi_tl(TCG_COND_NE, tmp1, 2, label_BB6_2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB6_1);
	
	gen_set_label(label_BB6_1);
	/*Assign dataOut to tmp1.*/
	tcg_gen_movi_tl(tmp2, 1);
	tcg_gen_mov_tl(dataOut[0], tmp2);
	/*Assign state to tmp1.*/
	tcg_gen_movi_tl(tmp3, 0);
	tcg_gen_mov_tl(state[0], tmp3);
	tcg_gen_mov_tl(sp[5], tmp2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB6_26);
	
	gen_set_label(label_BB6_2);
	tcg_gen_movi_tl(tmp1, 0);
	tcg_gen_mov_tl(sp[4], tmp1);
	/*Assign dataID to tmp1.*/
	tcg_gen_mov_tl(tmp1, dataID[0]);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp1, 0, label_BB6_4);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB6_3);
	
	gen_set_label(label_BB6_3);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp1, 1, label_BB6_5);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB6_6);
	
	gen_set_label(label_BB6_4);
	/*Assign pidx to tmp1.*/
	tcg_gen_mov_tl(tmp1, pidx[0]);
	tcg_gen_shli_tl(tmp1, tmp1, 2);
	/*Assign H to tmp2.*/
	/*Assign H[tmp1] to tmp1.*/

	/*ARRAY ACCESS*/
	LOAD_ARRAY(ctx, tmp1, H, 8, tmp1, 0);
	/*End ARRAY ACCESS*/

	tcg_gen_mov_tl(sp[3], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB6_7);
	
	gen_set_label(label_BB6_5);
	/*Assign pidx to tmp1.*/
	tcg_gen_mov_tl(tmp1, pidx[0]);
	tcg_gen_shli_tl(tmp1, tmp1, 2);
	/*Assign W to tmp2.*/
	/*Assign W[tmp1] to tmp1.*/

	/*ARRAY ACCESS*/
	LOAD_ARRAY(ctx, tmp1, W, 16, tmp1, 0);
	/*End ARRAY ACCESS*/

	tcg_gen_mov_tl(sp[3], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB6_7);
	
	gen_set_label(label_BB6_6);
	/*Assign pidx to tmp1.*/
	tcg_gen_mov_tl(tmp1, pidx[0]);
	tcg_gen_shli_tl(tmp1, tmp1, 2);
	/*Assign m to tmp2.*/
	/*Assign m[tmp1] to tmp1.*/

	/*ARRAY ACCESS*/
	LOAD_ARRAY(ctx, tmp1, m, 8, tmp1, 0);
	/*End ARRAY ACCESS*/

	tcg_gen_mov_tl(sp[3], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB6_7);
	
	gen_set_label(label_BB6_7);
	/*Assign memAddr to tmp1.*/
	tcg_gen_mov_tl(tmp2, memAddr[0]);
	tcg_gen_andi_tl(tmp2, tmp2, 3);
	tcg_gen_setcondi_tl(TCG_COND_NE, tmp4, tmp2, 0);
	tcg_gen_movi_tl(tmp3, 4);
	tcg_gen_movi_tl(tmp2, 1);
	tcg_gen_movi_tl(tmp5, 0);
	tcg_gen_brcond_tl(TCG_COND_NE, tmp4, tmp5, label_BB6_9);
	tcg_gen_movi_tl(tmp2, tmp3);
	
	gen_set_label(label_BB6_9);
	/*Assign numBytesOut to tmp3.*/
	tcg_gen_mov_tl(numBytesOut[0], tmp2);
	tcg_gen_mov_tl(tmp2, memAddr[0]);
	/*Assign memAddrOut to tmp4.*/
	tcg_gen_mov_tl(memAddrOut[0], tmp2);
	tcg_gen_mov_tl(tmp2, numBytesOut[0]);
	tcg_gen_mov_tl(tmp4, memAddr[0]);
	tcg_gen_add_tl(tmp2, tmp4, tmp2);
	tcg_gen_mov_tl(memAddr[0], tmp2);
	tcg_gen_mov_tl(tmp1, numBytesOut[0]);
	/*Assign numBytes to tmp2.*/
	tcg_gen_mov_tl(numBytes[0], tmp1);
	tcg_gen_mov_tl(tmp1, numBytesOut[0]);
	tcg_gen_brcondi_tl(TCG_COND_NE, tmp1, 1, label_BB6_16);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB6_10);
	
	gen_set_label(label_BB6_10);
	/*Assign state to tmp1.*/
	tcg_gen_mov_tl(tmp1, state[0]);
	tcg_gen_brcondi_tl(TCG_COND_NE, tmp1, 0, label_BB6_12);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB6_11);
	
	gen_set_label(label_BB6_11);
	tcg_gen_mov_tl(tmp1, sp[3]);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB6_13);
	
	gen_set_label(label_BB6_12);
	/*Assign tmpWord to tmp1.*/
	tcg_gen_mov_tl(tmp1, tmpWord[0]);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB6_13);
	
	gen_set_label(label_BB6_13);
	tcg_gen_mov_tl(sp[2], tmp1);
	tcg_gen_mov_tl(tmp1, sp[2]);
	/*Assign dataOut to tmp2.*/
	tcg_gen_mov_tl(dataOut[0], tmp1);
	tcg_gen_mov_tl(tmp1, sp[2]);
	tcg_gen_shri_tl(tmp1, tmp1, 8);
	/*Assign tmpWord to tmp2.*/
	tcg_gen_mov_tl(tmpWord[0], tmp1);
	/*Assign memAddrOut to tmp1.*/
	tcg_gen_mov_tl(tmp1, memAddrOut[0]);
	tcg_gen_andi_tl(tmp1, tmp1, 3);
	tcg_gen_brcondi_tl(TCG_COND_NE, tmp1, 3, label_BB6_15);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB6_14);
	
	gen_set_label(label_BB6_14);
	/*Assign pidx to tmp1.*/
	tcg_gen_mov_tl(tmp2, pidx[0]);
	tcg_gen_addi_tl(tmp2, tmp2, 1);
	tcg_gen_mov_tl(pidx[0], tmp2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB6_15);
	
	gen_set_label(label_BB6_15);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB6_23);
	
	gen_set_label(label_BB6_16);
	/*Assign bytePos to tmp1.*/
	tcg_gen_mov_tl(tmp2, bytePos[0]);
	tcg_gen_shli_tl(tmp2, tmp2, 3);
	tcg_gen_mov_tl(sp[1], tmp2);
	tcg_gen_mov_tl(tmp2, bytePos[0]);
	tcg_gen_movi_tl(tmp3, 4);
	tcg_gen_sub_tl(tmp2, tmp3, tmp2);
	tcg_gen_shli_tl(tmp2, tmp2, 3);
	tcg_gen_mov_tl(sp[0], tmp2);
	tcg_gen_mov_tl(tmp1, bytePos[0]);
	tcg_gen_brcondi_tl(TCG_COND_NE, tmp1, 0, label_BB6_18);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB6_17);
	
	gen_set_label(label_BB6_17);
	tcg_gen_mov_tl(tmp1, sp[3]);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB6_19);
	
	gen_set_label(label_BB6_18);
	/*Assign tmpWord to tmp1.*/
	tcg_gen_mov_tl(tmp1, tmpWord[0]);
	tcg_gen_mov_tl(tmp2, sp[3]);
	tcg_gen_mov_tl(tmp3, sp[0]);
	tcg_gen_shl_tl(tmp2, tmp2, tmp3);
	tcg_gen_or_tl(tmp1, tmp1, tmp2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB6_19);
	
	gen_set_label(label_BB6_19);
	/*Assign dataOut to tmp2.*/
	tcg_gen_mov_tl(dataOut[0], tmp1);
	tcg_gen_mov_tl(tmp1, sp[3]);
	tcg_gen_mov_tl(tmp2, sp[1]);
	tcg_gen_shr_tl(tmp1, tmp1, tmp2);
	/*Assign tmpWord to tmp2.*/
	tcg_gen_mov_tl(tmpWord[0], tmp1);
	/*Assign pidx to tmp1.*/
	tcg_gen_mov_tl(tmp1, pidx[0]);
	/*Assign numWords to tmp2.*/
	tcg_gen_mov_tl(tmp2, numWords[0]);
	tcg_gen_addi_tl(tmp2, tmp2, -1);
	tcg_gen_brcond_tl(TCG_COND_LTU, tmp1, tmp2, label_BB6_21);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB6_20);
	
	gen_set_label(label_BB6_20);
	/*Assign pidx to tmp1.*/
	tcg_gen_movi_tl(tmp2, 0);
	tcg_gen_mov_tl(pidx[0], tmp2);
	tcg_gen_movi_tl(tmp1, 1);
	tcg_gen_mov_tl(sp[4], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB6_22);
	
	gen_set_label(label_BB6_21);
	/*Assign pidx to tmp1.*/
	tcg_gen_mov_tl(tmp2, pidx[0]);
	tcg_gen_addi_tl(tmp2, tmp2, 1);
	tcg_gen_mov_tl(pidx[0], tmp2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB6_22);
	
	gen_set_label(label_BB6_22);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB6_23);
	
	gen_set_label(label_BB6_23);
	tcg_gen_mov_tl(tmp4, sp[4]);
	tcg_gen_movi_tl(tmp3, 1);
	tcg_gen_movi_tl(tmp2, 2);
	tcg_gen_movi_tl(tmp1, 0);
	tcg_gen_brcond_tl(TCG_COND_NE, tmp4, tmp1, label_BB6_25);
	tcg_gen_movi_tl(tmp2, tmp3);
	
	gen_set_label(label_BB6_25);
	/*Assign state to tmp3.*/
	tcg_gen_mov_tl(state[0], tmp2);
	/*Assign opOut to tmp2.*/
	tcg_gen_movi_tl(tmp3, 7);
	tcg_gen_mov_tl(opOut[0], tmp3);
	tcg_gen_mov_tl(sp[5], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB6_26);
	
	gen_set_label(label_BB6_26);
	tcg_gen_mov_tl(r0, sp[5]);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, end_label);

	gen_set_label(end_label);
}

static void computeHash(DisasContext *ctx, TCGv r0) {
	TCGLabel *label_BB7_1 = gen_new_label();
	TCGLabel *label_BB7_2 = gen_new_label();
	TCGLabel *label_BB7_3 = gen_new_label();
	TCGLabel *label_BB7_4 = gen_new_label();
	TCGLabel *label_BB7_5 = gen_new_label();
	TCGLabel *label_BB7_6 = gen_new_label();
	TCGLabel *label_BB7_7 = gen_new_label();
	TCGLabel *label_BB7_8 = gen_new_label();
	TCGLabel *label_BB7_9 = gen_new_label();
	TCGLabel *label_BB7_10 = gen_new_label();
	TCGLabel *label_BB7_11 = gen_new_label();
	TCGLabel *label_BB7_12 = gen_new_label();
	TCGLabel *label_BB7_13 = gen_new_label();
	TCGLabel *label_BB7_14 = gen_new_label();
	TCGLabel *label_BB7_15 = gen_new_label();
	TCGLabel *label_BB7_16 = gen_new_label();
	TCGLabel *end_label = gen_new_label();

	TCGv tmp1 = tcg_temp_new();
	TCGv tmp2 = tcg_temp_new();
	TCGv tmp3 = tcg_temp_new();

	TCGv sp[4]; for(int i = 0; i < 4; ++i) { sp[i] = tcg_temp_new(); }

	tcg_gen_mov_tl(sp[3], ra);
	tcg_gen_movi_tl(tmp1, 0);
	tcg_gen_mov_tl(sp[2], tmp1);
	/*Assign state to tmp1.*/
	tcg_gen_mov_tl(tmp1, state[0]);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp1, 0, label_BB7_3);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB7_1);
	
	gen_set_label(label_BB7_1);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp1, 1, label_BB7_8);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB7_2);
	
	gen_set_label(label_BB7_2);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp1, 2, label_BB7_11);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB7_16);
	
	gen_set_label(label_BB7_3);
	tcg_gen_movi_tl(tmp1, 0);
	tcg_gen_mov_tl(sp[1], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB7_4);
	
	gen_set_label(label_BB7_4);
	tcg_gen_mov_tl(tmp1, sp[1]);
	tcg_gen_brcondi_tl(TCG_COND_GT, tmp1, 7, label_BB7_7);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB7_5);
	
	gen_set_label(label_BB7_5);
	tcg_gen_mov_tl(tmp1, sp[1]);
	tcg_gen_shli_tl(tmp1, tmp1, 2);
	/*Assign H to tmp2.*/
	/*Assign H[tmp1] to tmp2.*/

	/*ARRAY ACCESS*/
	LOAD_ARRAY(ctx, tmp2, H, 8, tmp1, 0);
	/*End ARRAY ACCESS*/

	/*Assign m to tmp3.*/
	/*Assign m[tmp1] to tmp1.*/

	/*ARRAY ACCESS*/
	STORE_ARRAY(ctx, m, 8, tmp1, 0, tmp2);
	/*End ARRAY ACCESS*/

	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB7_6);
	
	gen_set_label(label_BB7_6);
	tcg_gen_mov_tl(tmp1, sp[1]);
	tcg_gen_addi_tl(tmp1, tmp1, 1);
	tcg_gen_mov_tl(sp[1], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB7_4);
	
	gen_set_label(label_BB7_7);
	/*Assign state to tmp1.*/
	tcg_gen_movi_tl(tmp2, 1);
	tcg_gen_mov_tl(state[0], tmp2);
	/*Assign hidx to tmp1.*/
	tcg_gen_movi_tl(tmp2, 0);
	tcg_gen_mov_tl(hidx[0], tmp2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB7_16);
	
	gen_set_label(label_BB7_8);
	computeHashCore(ctx, r0, a0);
	tcg_gen_brcondi_tl(TCG_COND_EQ, r0, 0, label_BB7_10);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB7_9);
	
	gen_set_label(label_BB7_9);
	/*Assign state to tmp1.*/
	tcg_gen_movi_tl(tmp2, 2);
	tcg_gen_mov_tl(state[0], tmp2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB7_10);
	
	gen_set_label(label_BB7_10);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB7_16);
	
	gen_set_label(label_BB7_11);
	tcg_gen_movi_tl(tmp1, 0);
	tcg_gen_mov_tl(sp[0], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB7_12);
	
	gen_set_label(label_BB7_12);
	tcg_gen_mov_tl(tmp1, sp[0]);
	tcg_gen_brcondi_tl(TCG_COND_GT, tmp1, 7, label_BB7_15);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB7_13);
	
	gen_set_label(label_BB7_13);
	tcg_gen_mov_tl(tmp1, sp[0]);
	tcg_gen_shli_tl(tmp1, tmp1, 2);
	/*Assign m to tmp2.*/
	/*Assign m[tmp1] to tmp2.*/

	/*ARRAY ACCESS*/
	LOAD_ARRAY(ctx, tmp2, m, 8, tmp1, 0);
	/*End ARRAY ACCESS*/

	/*Assign H to tmp3.*/
	/*Assign H[tmp1] to tmp1.*/

	/*ARRAY ACCESS*/
	LOAD_ARRAY(ctx, tmp3, H, 8, tmp1, 0);
	/*End ARRAY ACCESS*/

	tcg_gen_add_tl(tmp2, tmp2, tmp3);

	/*ARRAY ACCESS*/
	STORE_ARRAY(ctx, H, 8, tmp1, 0, tmp2);
	/*End ARRAY ACCESS*/

	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB7_14);
	
	gen_set_label(label_BB7_14);
	tcg_gen_mov_tl(tmp1, sp[0]);
	tcg_gen_addi_tl(tmp1, tmp1, 1);
	tcg_gen_mov_tl(sp[0], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB7_12);
	
	gen_set_label(label_BB7_15);
	tcg_gen_movi_tl(tmp1, 1);
	tcg_gen_mov_tl(sp[2], tmp1);
	/*Assign state to tmp1.*/
	tcg_gen_movi_tl(tmp2, 0);
	tcg_gen_mov_tl(state[0], tmp2);
	/*Assign padState to tmp1.*/
	tcg_gen_mov_tl(tmp1, padState[0]);
	tcg_gen_setcondi_tl(TCG_COND_NE, tmp1, tmp1, 0);
	tcg_gen_andi_tl(tmp1, tmp1, 1);
	/*Assign dataOut to tmp2.*/
	tcg_gen_mov_tl(dataOut[0], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB7_16);
	
	gen_set_label(label_BB7_16);
	tcg_gen_mov_tl(r0, sp[2]);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, end_label);

	gen_set_label(end_label);
}

static bool trans_reset(DisasContext *ctx, arg_reset *a) {
	TCGv rd_ = get_gpr(ctx, a->rd, EXT_NONE);
	TCGv rs1_ = get_gpr(ctx, a->rs1, EXT_NONE);
	TCGv rs2_ = get_gpr(ctx, a->rs2, EXT_NONE);

	TCGv tmp0 = tcg_temp_new();
	TCGv r0 = tcg_temp_new();
	tcg_gen_movi_tl(r0, 0);

	reset(ctx, r0);
	tcg_gen_mov_tl(tmp0, r0);
	return true;
}

static bool trans_setAddr_H(DisasContext *ctx, arg_setAddr_H *a) {
	TCGv rd_ = get_gpr(ctx, a->rd, EXT_NONE);
	TCGv rs1_ = get_gpr(ctx, a->rs1, EXT_NONE);
	TCGv rs2_ = get_gpr(ctx, a->rs2, EXT_NONE);

	TCGv tmp0 = tcg_temp_new();
	TCGv a0 = tcg_temp_new();
	TCGv a1 = tcg_temp_new();
	TCGv r0 = tcg_temp_new();
	tcg_gen_movi_tl(r0, 0);

	tcg_gen_mov_tl(a0, rs1);
	tcg_gen_movi_tl(a1, 0);
	setAddr(ctx, r0, a0, a1);
	tcg_gen_mov_tl(tmp0, r0);
	return true;
}

static bool trans_setAddr_W(DisasContext *ctx, arg_setAddr_W *a) {
	TCGv rd_ = get_gpr(ctx, a->rd, EXT_NONE);
	TCGv rs1_ = get_gpr(ctx, a->rs1, EXT_NONE);
	TCGv rs2_ = get_gpr(ctx, a->rs2, EXT_NONE);

	TCGv tmp0 = tcg_temp_new();
	TCGv a0 = tcg_temp_new();
	TCGv a1 = tcg_temp_new();
	TCGv r0 = tcg_temp_new();
	tcg_gen_movi_tl(r0, 0);

	tcg_gen_mov_tl(a0, rs1);
	tcg_gen_movi_tl(a1, 1);
	setAddr(ctx, r0, a0, a1);
	tcg_gen_mov_tl(tmp0, r0);
	return true;
}

static bool trans_setAddr_m(DisasContext *ctx, arg_setAddr_m *a) {
	TCGv rd_ = get_gpr(ctx, a->rd, EXT_NONE);
	TCGv rs1_ = get_gpr(ctx, a->rs1, EXT_NONE);
	TCGv rs2_ = get_gpr(ctx, a->rs2, EXT_NONE);

	TCGv tmp0 = tcg_temp_new();
	TCGv a0 = tcg_temp_new();
	TCGv a1 = tcg_temp_new();
	TCGv r0 = tcg_temp_new();
	tcg_gen_movi_tl(r0, 0);

	tcg_gen_mov_tl(a0, rs1);
	tcg_gen_movi_tl(a1, 2);
	setAddr(ctx, r0, a0, a1);
	tcg_gen_mov_tl(tmp0, r0);
	return true;
}

static bool trans_loaData(DisasContext *ctx, arg_loaData *a) {
	TCGLabel *label0 = gen_new_label();
	TCGLabel *label1 = gen_new_label();
	TCGLabel *label2 = gen_new_label();

	TCGv rd_ = get_gpr(ctx, a->rd, EXT_NONE);
	TCGv rs1_ = get_gpr(ctx, a->rs1, EXT_NONE);
	TCGv rs2_ = get_gpr(ctx, a->rs2, EXT_NONE);

	TCGv tmp0 = tcg_temp_new();
	TCGv a0 = tcg_temp_new();
	TCGv r0 = tcg_temp_new();
	tcg_gen_movi_tl(r0, 0);

	TCGv ready_ = tcg_temp_new();

	tcg_gen_movi_tl(ready_, 0);

	gen_set_label(label0);
	tcg_gen_setcondi_tl(TCG_COND_EQ, tmp0, ready_, 0);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp0, 0, label1);
	tcg_gen_movi_tl(dataOut, 36);
	tcg_gen_movi_tl(opOut, 0);
	tcg_gen_movi_tl(memAddrOut, 0);
	tcg_gen_mov_tl(a0, memLoadDataIn);
	loadData(ctx, r0, a0);
	tcg_gen_mov_tl(tmp0, r0);
	tcg_gen_mov_tl(ready_, tmp0);
	tcg_gen_setcondi_tl(TCG_COND_EQ, tmp0, opOut, 6);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp0, 0, label2);
	tcg_gen_qemu_ld_tl(memLoadDataIn, memAddrOut, ctx->mem_idx, MO_TUEL);

	gen_set_label(label2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label0);

	gen_set_label(label1);
	tcg_gen_mov_tl(rd_, dataOut);
	return true;
}

static bool trans_storeData(DisasContext *ctx, arg_storeData *a) {
	TCGLabel *label0 = gen_new_label();
	TCGLabel *label1 = gen_new_label();
	TCGLabel *label2 = gen_new_label();

	TCGv rd_ = get_gpr(ctx, a->rd, EXT_NONE);
	TCGv rs1_ = get_gpr(ctx, a->rs1, EXT_NONE);
	TCGv rs2_ = get_gpr(ctx, a->rs2, EXT_NONE);

	TCGv tmp0 = tcg_temp_new();
	TCGv r0 = tcg_temp_new();
	tcg_gen_movi_tl(r0, 0);

	TCGv ready_ = tcg_temp_new();

	tcg_gen_movi_tl(ready_, 0);

	gen_set_label(label0);
	tcg_gen_setcondi_tl(TCG_COND_EQ, tmp0, ready_, 0);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp0, 0, label1);
	tcg_gen_movi_tl(dataOut, 0);
	tcg_gen_movi_tl(opOut, 36);
	tcg_gen_movi_tl(memAddrOut, 0);
	storeData(ctx, r0);
	tcg_gen_mov_tl(tmp0, r0);
	tcg_gen_mov_tl(ready_, tmp0);
	tcg_gen_setcondi_tl(TCG_COND_EQ, tmp0, opOut, 7);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp0, 0, label2);
	tcg_gen_qemu_st_tl(dataOut, memAddrOut, ctx->mem_idx, MO_TUEL);

	gen_set_label(label2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label0);

	gen_set_label(label1);
	tcg_gen_mov_tl(rd_, dataOut);
	return true;
}

static bool trans_computeHash(DisasContext *ctx, arg_computeHash *a) {
	TCGLabel *label0 = gen_new_label();
	TCGLabel *label1 = gen_new_label();

	TCGv rd_ = get_gpr(ctx, a->rd, EXT_NONE);
	TCGv rs1_ = get_gpr(ctx, a->rs1, EXT_NONE);
	TCGv rs2_ = get_gpr(ctx, a->rs2, EXT_NONE);

	TCGv tmp0 = tcg_temp_new();
	TCGv r0 = tcg_temp_new();
	tcg_gen_movi_tl(r0, 0);

	TCGv ready_ = tcg_temp_new();

	tcg_gen_movi_tl(ready_, 0);

	gen_set_label(label0);
	tcg_gen_setcondi_tl(TCG_COND_EQ, tmp0, ready_, 0);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp0, 0, label1);
	tcg_gen_movi_tl(dataOut, 0);
	tcg_gen_movi_tl(opOut, 36);
	computeHash(ctx, r0);
	tcg_gen_mov_tl(tmp0, r0);
	tcg_gen_mov_tl(ready_, tmp0);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label0);

	gen_set_label(label1);
	tcg_gen_mov_tl(rd_, dataOut);
	return true;
}

