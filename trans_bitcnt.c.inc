/*=========================================================================================*/
/*                          This file was generated by "translater".                       */
/*=========================================================================================*/

#if !defined(__HELPERS_STORE_ARRAY__)
#define __HELPERS_STORE_ARRAY__
static void STORE_ARRAY(DisasContext *ctx, TCGv *array, int length, TCGv index_reg, int offset, TCGv rs) {
	TCGv index = tcg_temp_new();
	tcg_gen_addi_tl(index, index_reg, offset);
	TCGLabel *local_labels[length];
	for(int i = 0; i < length; ++i) { local_labels[i] = gen_new_label(); }
	TCGLabel *local_end = gen_new_label();
	for(int i = 0; i < length; ++i) {
		tcg_gen_brcondi_tl(TCG_COND_EQ, index, i, local_labels[i]);
	}
	tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	for(int i = 0; i < length; ++i) {
		gen_set_label(local_labels[i]);
		tcg_gen_mov_tl(array[i], rs);
		tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	}
}
#endif //!__HELPERS_STORE_ARRAY__

#if !defined(__HELPERS_LOAD_FRAME_ARRAY__)
#define __HELPERS_LOAD_FRAME_ARRAY__
static void LOAD_FRAME_ARRAY(DisasContext *ctx, TCGv rd, TCGv *array, int length, int offset, TCGv index) {
	TCGLabel *local_labels[length];
	for(int i = 0; i < length; ++i) { local_labels[i] = gen_new_label(); }
	TCGLabel *local_end = gen_new_label();
	for(int i = 0; i < length; ++i) {
		tcg_gen_brcondi_tl(TCG_COND_EQ, index, i, local_labels[i]);
	}
	tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	for(int i = 0; i < length; ++i) {
		gen_set_label(local_labels[i]);
		tcg_gen_mov_tl(rd, array[i + offset]);
		tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	}
}
#endif //!__HELPERS_LOAD_FRAME_ARRAY__

#if !defined(__HELPERS_STORE_FRAME_ARRAY__)
#define __HELPERS_STORE_FRAME_ARRAY__
static void STORE_FRAME_ARRAY(DisasContext *ctx, TCGv *array, int length, int offset, TCGv index, TCGv rs) {
	TCGLabel *local_labels[length];
	for(int i = 0; i < length; ++i) { local_labels[i] = gen_new_label(); }
	TCGLabel *local_end = gen_new_label();
	for(int i = 0; i < length; ++i) {
		tcg_gen_brcondi_tl(TCG_COND_EQ, index, i, local_labels[i]);
	}
	tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	for(int i = 0; i < length; ++i) {
		gen_set_label(local_labels[i]);
		tcg_gen_mov_tl(array[i + offset], rs);
		tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	}
}
#endif //!__HELPERS_STORE_FRAME_ARRAY__

#if !defined(__HELPERS_LOAD_ARRAY_CONST__)
#define __HELPERS_LOAD_ARRAY_CONST__
static void LOAD_ARRAY_CONST(DisasContext *ctx, TCGv rd, const unsigned *array, int length, TCGv index_reg, int offset) {
	TCGv index = tcg_temp_new();
	tcg_gen_addi_tl(index, index_reg, offset);
	TCGLabel *local_labels[length];
	for(int i = 0; i < length; ++i) { local_labels[i] = gen_new_label(); }
	TCGLabel *local_end = gen_new_label();
	for(int i = 0; i < length; ++i) {
		tcg_gen_brcondi_tl(TCG_COND_EQ, index, i, local_labels[i]);
	}
	tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	for(int i = 0; i < length; ++i) {
		gen_set_label(local_labels[i]);
		tcg_gen_movi_tl(rd, array[i]);
		tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	}
}
#endif //!__HELPERS_LOAD_ARRAY_CONST__

static TCGv array[5], fuga[2], hoge[4], idx[3];
static const char array_name[][8] = {"array_0", "array_1", "array_2", "array_3", "array_4", };
static const char fuga_name[][7] = {"fuga_0", "fuga_1", };
static const char hoge_name[][7] = {"hoge_0", "hoge_1", "hoge_2", "hoge_3", };
static const char idx_name[][6] = {"idx_0", "idx_1", "idx_2", };

static void riscv_bitcnt_translate_init(void) {
	for(int i = 0; i < 5; ++i) {
		array[i] = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState,array[i]), array_name[i]);
	}
	for(int i = 0; i < 2; ++i) {
		fuga[i] = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState,fuga[i]), fuga_name[i]);
	}
	for(int i = 0; i < 4; ++i) {
		hoge[i] = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState,hoge[i]), hoge_name[i]);
	}
	for(int i = 0; i < 3; ++i) {
		idx[i] = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState,idx[i]), idx_name[i]);
	}
}

static const unsigned hoge0[4] = { 
	0x1, 0x2, 0x3, 0x4, 
};

static void reset(DisasContext *ctx, TCGv r0);
static void func(DisasContext *ctx, TCGv r0);
static void array_access(DisasContext *ctx, TCGv r0, TCGv a0);

static void reset(DisasContext *ctx, TCGv r0) {
	TCGLabel *label_BB0_1 = gen_new_label();
	TCGLabel *label_BB0_2 = gen_new_label();
	TCGLabel *label_BB0_3 = gen_new_label();
	TCGLabel *label_BB0_4 = gen_new_label();
	TCGLabel *end_label = gen_new_label();

	TCGv tmp1 = tcg_temp_new();
	TCGv tmp2 = tcg_temp_new();
	TCGv tmp3 = tcg_temp_new();

	TCGv sp[1]; for(int i = 0; i < 1; ++i) { sp[i] = tcg_temp_new(); }

	tcg_gen_movi_tl(tmp1, 0);
	tcg_gen_mov_tl(sp[0], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_1);
	
	gen_set_label(label_BB0_1);
	tcg_gen_mov_tl(tmp1, sp[0]);
	tcg_gen_brcondi_tl(TCG_COND_GT, tmp1, 3, label_BB0_4);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_2);
	
	gen_set_label(label_BB0_2);
	tcg_gen_mov_tl(tmp1, sp[0]);
	tcg_gen_shli_tl(tmp1, tmp1, 2);
	/*Assign hoge0 to tmp2.*/
	/*Assign hoge0[tmp1] to tmp2.*/

	/*ARRAY ACCESS*/
	tcg_gen_srai_tl(tmp1, tmp1, 2);
	LOAD_ARRAY_CONST(ctx, tmp2, hoge0, 4, tmp1,0);
	tcg_gen_shli_tl(tmp1, tmp1, 2);
	/*End ARRAY ACCESS*/

	/*Assign hoge to tmp3.*/
	/*Assign hoge[tmp1] to tmp1.*/

	/*ARRAY ACCESS*/
	tcg_gen_sari_tl(tmp1, tmp1, 2);
	STORE_ARRAY(ctx, hoge, 4, tmp1, 0, tmp2);
	tcg_gen_shli_tl(tmp1, tmp1, 2);
	/*End ARRAY ACCESS*/

	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_3);
	
	gen_set_label(label_BB0_3);
	tcg_gen_mov_tl(tmp1, sp[0]);
	tcg_gen_addi_tl(tmp1, tmp1, 1);
	tcg_gen_mov_tl(sp[0], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_1);
	
	gen_set_label(label_BB0_4);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, end_label);

	gen_set_label(end_label);
}

static void func(DisasContext *ctx, TCGv r0) {
	TCGLabel *label_BB1_1 = gen_new_label();
	TCGLabel *label_BB1_2 = gen_new_label();
	TCGLabel *label_BB1_3 = gen_new_label();
	TCGLabel *label_BB1_4 = gen_new_label();
	TCGLabel *label_BB1_5 = gen_new_label();
	TCGLabel *label_BB1_6 = gen_new_label();
	TCGLabel *label_BB1_7 = gen_new_label();
	TCGLabel *label_BB1_8 = gen_new_label();
	TCGLabel *end_label = gen_new_label();

	TCGv tmp1 = tcg_temp_new();
	TCGv tmp2 = tcg_temp_new();
	TCGv tmp3 = tcg_temp_new();

	TCGv sp[15]; for(int i = 0; i < 15; ++i) { sp[i] = tcg_temp_new(); }

	tcg_gen_movi_tl(tmp1, 0);
	tcg_gen_mov_tl(sp[2], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_1);
	
	gen_set_label(label_BB1_1);
	tcg_gen_mov_tl(tmp1, sp[2]);
	tcg_gen_brcondi_tl(TCG_COND_GT, tmp1, 11, label_BB1_4);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_2);
	
	gen_set_label(label_BB1_2);
	tcg_gen_mov_tl(tmp1, sp[2]);
	tcg_gen_shli_tl(tmp2, tmp1, 2);
	/*Assign sp[3] to tmp3.*/
	/*Assign sp[3 + tmp2] to tmp2.*/

	/*STACK POINTER ACCESS*/
	tcg_gen_srai_tl(tmp2, tmp2, 2);
	STORE_FRAME_ARRAY(ctx, sp, 15, 3, tmp2, tmp1);
	tcg_gen_shli_tl(tmp2, tmp2, 2);
	/*End STACK POINTER ACCESS*/

	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_3);
	
	gen_set_label(label_BB1_3);
	tcg_gen_mov_tl(tmp1, sp[2]);
	tcg_gen_addi_tl(tmp1, tmp1, 1);
	tcg_gen_mov_tl(sp[2], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_1);
	
	gen_set_label(label_BB1_4);
	tcg_gen_movi_tl(tmp1, 0);
	tcg_gen_mov_tl(sp[1], tmp1);
	tcg_gen_mov_tl(sp[0], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_5);
	
	gen_set_label(label_BB1_5);
	tcg_gen_mov_tl(tmp1, sp[0]);
	tcg_gen_brcondi_tl(TCG_COND_GT, tmp1, 11, label_BB1_8);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_6);
	
	gen_set_label(label_BB1_6);
	tcg_gen_mov_tl(tmp1, sp[0]);
	tcg_gen_shli_tl(tmp1, tmp1, 2);
	/*Assign sp[3] to tmp2.*/
	/*Assign sp[3 + tmp1] to tmp1.*/

	/*STACK POINTER ACCESS*/
	tcg_gen_srai_tl(tmp1, tmp1, 2);
	LOAD_FRAME_ARRAY(ctx, tmp1, sp, 15, 3, tmp1);
	/*End STACK POINTER ACCESS*/

	tcg_gen_mov_tl(tmp2, sp[1]);
	tcg_gen_add_tl(tmp1, tmp2, tmp1);
	tcg_gen_mov_tl(sp[1], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_7);
	
	gen_set_label(label_BB1_7);
	tcg_gen_mov_tl(tmp1, sp[0]);
	tcg_gen_addi_tl(tmp1, tmp1, 1);
	tcg_gen_mov_tl(sp[0], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_5);
	
	gen_set_label(label_BB1_8);
	tcg_gen_mov_tl(tmp1, sp[6]);
	/*Assign hoge to tmp2.*/
	tcg_gen_mov_tl(tmp2, hoge[3]);
	tcg_gen_add_tl(r0, tmp1, tmp2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, end_label);

	gen_set_label(end_label);
}

static void array_access(DisasContext *ctx, TCGv r0, TCGv a0) {
	TCGLabel *label_BB2_1 = gen_new_label();
	TCGLabel *label_BB2_2 = gen_new_label();
	TCGLabel *end_label = gen_new_label();

	TCGv tmp1 = tcg_temp_new();
	TCGv tmp2 = tcg_temp_new();

	TCGv sp[4]; for(int i = 0; i < 4; ++i) { sp[i] = tcg_temp_new(); }

	tcg_gen_mov_tl(sp[3], ra);
	tcg_gen_mov_tl(sp[2], a0);
	func(ctx, r0, a0);
	tcg_gen_mov_tl(tmp2, sp[2]);
	tcg_gen_movi_tl(tmp1, 0);
	tcg_gen_brcondi_tl(TCG_COND_NE, tmp2, 1, label_BB2_2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_1);
	
	gen_set_label(label_BB2_1);
	tcg_gen_mov_tl(tmp1, sp[2]);
	tcg_gen_setcondi_tl(TCG_COND_EQ, tmp1, tmp1, 2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_2);
	
	gen_set_label(label_BB2_2);
	tcg_gen_andi_tl(r0, tmp1, 1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, end_label);

	gen_set_label(end_label);
}

static bool trans_bitcnt(DisasContext *ctx, arg_bitcnt *a) {
	TCGLabel *label0 = gen_new_label();
	TCGLabel *label1 = gen_new_label();
	TCGLabel *label2 = gen_new_label();
	TCGLabel *label3 = gen_new_label();

	TCGv rd = get_gpr(ctx, a->rd, EXT_NONE);
	TCGv rs1 = get_gpr(ctx, a->rs1, EXT_NONE);
	TCGv rs2 = get_gpr(ctx, a->rs2, EXT_NONE);

	TCGv tmp0 = tcg_temp_new();
	TCGv r0 = tcg_temp_new();
	tcg_gen_movi_tl(r0, 0);

	tcg_gen_setcondi_tl(TCG_COND_EQ, tmp0, rs1, 100);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp0, 0, label0);
	tcg_gen_movi_tl(rd, 0);

	gen_set_label(label1);
	tcg_gen_setcondi_tl(TCG_COND_NE, tmp0, rd, 100);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp0, 0, label2);
	tcg_gen_addi_tl(rd, rd, 1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label1);

	gen_set_label(label2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label3);

	gen_set_label(label0);
	tcg_gen_mov_tl(rd, tmp-1);

	gen_set_label(label3);
	return true;
}

