/*=========================================================================================*/
/*                          This file was generated by "translater".                       */
/*=========================================================================================*/

static void LOAD_ARRAY(DisasContext *ctx, TCGv rd, TCGv *array, int length, TCGv index) {
	TCGLabel *local_labels[length];
	for(int i = 0; i < length; ++i) { local_labels[i] = gen_new_label(); }
	TCGLabel *local_end = gen_new_label();
	for(int i = 0; i < len; ++i) {
		tcg_gen_brcondi_tl(TCG_COND_EQ, index, i, local_labels[i]);
	}
	tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	for(int i = 0; i < length; ++i) {
		gen_set_label(local_labels[i]);
		tcg_gen_mov_tl(rd, array[i]);
		tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	}
};

static void STORE_ARRAY(DisasContext *ctx, TCGv *array, int length, TCGv index, TCGv rs) {
	TCGLabel *local_labels[length];
	for(int i = 0; i < length; ++i) { local_labels[i] = gen_new_label(); }
	TCGLabel *local_end = gen_new_label();
	for(int i = 0; i < len; ++i) {
		tcg_gen_brcondi_tl(TCG_COND_EQ, index, i, local_labels[i]);
	}
	tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	for(int i = 0; i < length; ++i) {
		gen_set_label(local_labels[i]);
		tcg_gen_mov_tl(array[i], rs);
		tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	}
};

static void LOAD_FRAME_ARRAY(DisasContext *ctx, TCGv rd, TCGv *array, int length, int offset, TCGv index) {
	TCGLabel *local_labels[length];
	for(int i = 0; i < length; ++i) { local_labels[i] = gen_new_label(); }
	TCGLabel *local_end = gen_new_label();
	for(int i = 0; i < len; ++i) {
		tcg_gen_brcondi_tl(TCG_COND_EQ, index, i, local_labels[i]);
	}
	tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	for(int i = 0; i < length; ++i) {
		gen_set_label(local_labels[i]);
		tcg_gen_mov_tl(rd, array[i + offset]);
		tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	}
};

static void STORE_FRAME_ARRAY(DisasContext *ctx, TCGv *array, int length, int offset, TCGv index, TCGv rs) {
	TCGLabel *local_labels[length];
	for(int i = 0; i < length; ++i) { local_labels[i] = gen_new_label(); }
	TCGLabel *local_end = gen_new_label();
	for(int i = 0; i < len; ++i) {
		tcg_gen_brcondi_tl(TCG_COND_EQ, index, i, local_labels[i]);
	}
	tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	for(int i = 0; i < length; ++i) {
		gen_set_label(local_labels[i]);
		tcg_gen_mov_tl(array[i + offset], rs);
		tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	}
};

static TCGv array[5], fuga[2], hoge[4], idx[3];
static const char array_name[][8] = {"array_0", "array_1", "array_2", "array_3", "array_4", };
static const char fuga_name[][7] = {"fuga_0", "fuga_1", };
static const char hoge_name[][7] = {"hoge_0", "hoge_1", "hoge_2", "hoge_3", };
static const char idx_name[][6] = {"idx_0", "idx_1", "idx_2", };

static void riscv__translate_init(void) {
	for(int i = 0; i < 5; ++i) {
		array[i] = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState,array[i]), array_name[i]);
	}
	for(int i = 0; i < 2; ++i) {
		fuga[i] = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState,fuga[i]), fuga_name[i]);
	}
	for(int i = 0; i < 4; ++i) {
		hoge[i] = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState,hoge[i]), hoge_name[i]);
	}
	for(int i = 0; i < 3; ++i) {
		idx[i] = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState,idx[i]), idx_name[i]);
	}
}

static void array_access(DisasContext *ctx, TCGv r0, TCGv a0);
static void func(DisasContext *ctx, TCGv r0, TCGv a0);

static void array_access(DisasContext *ctx, TCGv r0, TCGv a0) {
	TCGv tmp1 = tcg_temp_local_new();
	TCGv tmp2 = tcg_temp_local_new();
	TCGv tmp3 = tcg_temp_local_new();
	TCGv tmp4 = tcg_temp_local_new();
	TCGv tmp5 = tcg_temp_local_new();
	TCGv tmp6 = tcg_temp_local_new();
	TCGv a1 = tcg_temp_local_new();
	TCGv a2 = tcg_temp_local_new();
	TCGv a3 = tcg_temp_local_new();
	TCGv a4 = tcg_temp_local_new();
	TCGv a5 = tcg_temp_local_new();
	TCGv a6 = tcg_temp_local_new();
	TCGv a7 = tcg_temp_local_new();


	TCGv sp[4]; for(int i = 0; i < 4; ++i){ sp[i] = tcg_temp_local_new(); }

	tcg_gen_mov_tl(sp[3], ra);
	tcg_gen_mov_tl(sp[2], a0);
	func(ctx, r0, a0);
	tcg_gen_mov_tl(tmp1, sp[2]);
	tcg_gen_shli_tl(tmp2, tmp1, 2);
	/*Assign idx to tmp3.*/
	/*Assign idx[tmp2] to tmp2.*/

	/*ARRAY ACCESS*/
	tcg_gen_srai_tl(tmp2, tmp2, 2);
	LOAD_ARRAY(ctx, tmp2, idx, 3, tmp2);
	/*End ARRAY ACCESS*/

	tcg_gen_shli_tl(tmp2, tmp2, 2);
	/*Assign array to tmp3.*/
	/*Assign array[tmp2] to tmp2.*/

	/*ARRAY ACCESS*/
	tcg_gen_sari_tl(tmp2, tmp2, 2);
	STORE_ARRAY(ctx, array, 5, tmp2, tmp1);
	tcg_gen_shli_tl(tmp2, tmp2, 2);
	/*End ARRAY ACCESS*/

	tcg_gen_andi_tl(r0, tmp1, 255);
}

static void func(DisasContext *ctx, TCGv r0, TCGv a0) {
	TCGv tmp1 = tcg_temp_local_new();
	TCGv tmp2 = tcg_temp_local_new();
	TCGv tmp3 = tcg_temp_local_new();
	TCGv tmp4 = tcg_temp_local_new();
	TCGv tmp5 = tcg_temp_local_new();
	TCGv tmp6 = tcg_temp_local_new();
	TCGv a1 = tcg_temp_local_new();
	TCGv a2 = tcg_temp_local_new();
	TCGv a3 = tcg_temp_local_new();
	TCGv a4 = tcg_temp_local_new();
	TCGv a5 = tcg_temp_local_new();
	TCGv a6 = tcg_temp_local_new();
	TCGv a7 = tcg_temp_local_new();

	TCGLabel *label_BB1_1 = gen_new_label();
	TCGLabel *label_BB1_2 = gen_new_label();
	TCGLabel *label_BB1_3 = gen_new_label();
	TCGLabel *label_BB1_4 = gen_new_label();
	TCGLabel *label_BB1_5 = gen_new_label();
	TCGLabel *label_BB1_6 = gen_new_label();
	TCGLabel *label_BB1_7 = gen_new_label();
	TCGLabel *label_BB1_8 = gen_new_label();

	TCGv sp[15]; for(int i = 0; i < 15; ++i){ sp[i] = tcg_temp_local_new(); }

	tcg_gen_movi_tl(tmp1, 0);
	tcg_gen_mov_tl(sp[2], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_1);
	
	gen_set_label(label_BB1_1);
	tcg_gen_mov_tl(tmp1, sp[2]);
	tcg_gen_brcondi_tl(TCG_COND_GT, tmp1, 11, label_BB1_4);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_2);
	
	gen_set_label(label_BB1_2);
	tcg_gen_mov_tl(tmp1, sp[2]);
	tcg_gen_shli_tl(tmp2, tmp1, 2);
	/*Assign sp[3] to tmp3.*/
	/*Assign sp[3 + tmp2] to tmp2.*/

	/*STACK POINTER ACCESS*/
	tcg_gen_srai_tl(tmp2, tmp2, 2);
	STORE_FRAME_ARRAY(ctx, sp, 15, 3, tmp2, tmp1);
	tcg_gen_shli_tl(tmp2, tmp2, 2);
	/*End STACK POINTER ACCESS*/

	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_3);
	
	gen_set_label(label_BB1_3);
	tcg_gen_mov_tl(tmp1, sp[2]);
	tcg_gen_addi_tl(tmp1, tmp1, 1);
	tcg_gen_mov_tl(sp[2], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_1);
	
	gen_set_label(label_BB1_4);
	tcg_gen_movi_tl(tmp1, 0);
	tcg_gen_mov_tl(sp[1], tmp1);
	tcg_gen_mov_tl(sp[0], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_5);
	
	gen_set_label(label_BB1_5);
	tcg_gen_mov_tl(tmp1, sp[0]);
	tcg_gen_brcondi_tl(TCG_COND_GT, tmp1, 11, label_BB1_8);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_6);
	
	gen_set_label(label_BB1_6);
	tcg_gen_mov_tl(tmp1, sp[0]);
	tcg_gen_shli_tl(tmp1, tmp1, 2);
	/*Assign sp[3] to tmp2.*/
	/*Assign sp[3 + tmp1] to tmp1.*/

	/*STACK POINTER ACCESS*/
	tcg_gen_srai_tl(tmp1, tmp1, 2);
	LOAD_FRAME_ARRAY(ctx, tmp1, sp, 15, 3, tmp1);
	/*End STACK POINTER ACCESS*/

	tcg_gen_mov_tl(tmp2, sp[1]);
	tcg_gen_add_tl(tmp1, tmp2, tmp1);
	tcg_gen_mov_tl(sp[1], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_7);
	
	gen_set_label(label_BB1_7);
	tcg_gen_mov_tl(tmp1, sp[0]);
	tcg_gen_addi_tl(tmp1, tmp1, 1);
	tcg_gen_mov_tl(sp[0], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_5);
	
	gen_set_label(label_BB1_8);
	tcg_gen_mov_tl(r0, sp[6]);
}
