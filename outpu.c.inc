/*=========================================================================================*/
/*                          This file was generated by "translater".                       */
/*=========================================================================================*/

#if !defined(__TCG_TRANSLATER_HELPERS__)
#define __TCG_TRANSLATER_HELPERS__
static void LOAD_ARRAY(DisasContext *ctx, TCGv rd, TCGv *array, int length, TCGv index) {
	TCGLabel *local_labels[length];
	for(int i = 0; i < length; ++i) { local_labels[i] = gen_new_label(); }
	TCGLabel *local_end = gen_new_label();
	for(int i = 0; i < len; ++i) {
		tcg_gen_brcondi_tl(TCG_COND_EQ, index, i, local_labels[i]);
	}
	tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	for(int i = 0; i < length; ++i) {
		gen_set_label(local_labels[i]);
		tcg_gen_mov_tl(rd, array[i]);
		tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	}
}

static void STORE_ARRAY(DisasContext *ctx, TCGv *array, int length, TCGv index, TCGv rs) {
	TCGLabel *local_labels[length];
	for(int i = 0; i < length; ++i) { local_labels[i] = gen_new_label(); }
	TCGLabel *local_end = gen_new_label();
	for(int i = 0; i < len; ++i) {
		tcg_gen_brcondi_tl(TCG_COND_EQ, index, i, local_labels[i]);
	}
	tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	for(int i = 0; i < length; ++i) {
		gen_set_label(local_labels[i]);
		tcg_gen_mov_tl(array[i], rs);
		tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	}
}

static void LOAD_FRAME_ARRAY(DisasContext *ctx, TCGv rd, TCGv *array, int length, int offset, TCGv index) {
	TCGLabel *local_labels[length];
	for(int i = 0; i < length; ++i) { local_labels[i] = gen_new_label(); }
	TCGLabel *local_end = gen_new_label();
	for(int i = 0; i < len; ++i) {
		tcg_gen_brcondi_tl(TCG_COND_EQ, index, i, local_labels[i]);
	}
	tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	for(int i = 0; i < length; ++i) {
		gen_set_label(local_labels[i]);
		tcg_gen_mov_tl(rd, array[i + offset]);
		tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	}
}

static void STORE_FRAME_ARRAY(DisasContext *ctx, TCGv *array, int length, int offset, TCGv index, TCGv rs) {
	TCGLabel *local_labels[length];
	for(int i = 0; i < length; ++i) { local_labels[i] = gen_new_label(); }
	TCGLabel *local_end = gen_new_label();
	for(int i = 0; i < len; ++i) {
		tcg_gen_brcondi_tl(TCG_COND_EQ, index, i, local_labels[i]);
	}
	tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	for(int i = 0; i < length; ++i) {
		gen_set_label(local_labels[i]);
		tcg_gen_mov_tl(array[i + offset], rs);
		tcg_gen_brcondi_tl(TCG_COND_EQ, ctx->zero, 0x0, local_end);
	}
}

static void LOGICAL_AND(DisasContext *ctx, TCGv rd, TCGv rs1, TCGv rs2){
	TCGvLabel *label = gen_new_label();
	tcg_gen_movi_tl(rd, 0);
	tcg_gen_brcondi(TCG_COND_EQ, rs1, 0x0, label);
	tcg_gen_brcondi(TCG_COND_EQ, rs2, 0x0, label);
	tcg_gen_movi_tl(rd, 1);
	gen_set_label(label1);
}

static void LOGICAL_OR(DisasContext *ctx, TCGv rd, TCGv rs1, TCGv rs2){
	TCGvLabel *label = gen_new_label();
	tcg_gen_movi_tl(rd, 1);
	tcg_gen_brcondi(TCG_COND_NE, rs1, 0x0, label);
	tcg_gen_brcondi(TCG_COND_NE, rs2, 0x0, label);
	tcg_gen_movi_tl(rd, 0);
	gen_set_label(label1);
}

static void LOGICAL_ANDi(DisasContext *ctx, TCGv rd, TCGv rs1, int imm){
	TCGvLabel *label = gen_new_label();
	TCGv rs2 = tcg_temp_local_new();
	tcg_gen_movi_tl(rs2, imm);
	tcg_gen_movi_tl(rd, 0);
	tcg_gen_brcondi(TCG_COND_EQ, rs1, 0x0, label);
	tcg_gen_brcondi(TCG_COND_EQ, rs2, 0x0, label);
	tcg_gen_movi_tl(rd, 1);
	gen_set_label(label1);
}

static void LOGICAL_ORi(DisasContext *ctx, TCGv rd, TCGv rs1, int imm){
	TCGvLabel *label = gen_new_label();
	TCGv rs2 = tcg_temp_local_new();
	tcg_gen_movi_tl(rs2, imm);
	tcg_gen_movi_tl(rd, 1);
	tcg_gen_brcondi(TCG_COND_NE, rs1, 0x0, label);
	tcg_gen_brcondi(TCG_COND_NE, rs2, 0x0, label);
	tcg_gen_movi_tl(rd, 0);
	gen_set_label(label1);
}
#endif // !__TCG_TRANSLATER_HELPERS__

static TCGv H[8], W[16], bytePos, dataID, dataOut, inBytes, m[8], memAddr, memAddrOut, numBytes, numBytesOut, opOut, padState, pidx, state, tmpWord;
static const char H_name[][4] = {"H_0", "H_1", "H_2", "H_3", "H_4", "H_5", "H_6", "H_7", };
static const char W_name[][5] = {"W_0", "W_1", "W_2", "W_3", "W_4", "W_5", "W_6", "W_7", "W_8", "W_9", "W_10", "W_11", "W_12", "W_13", "W_14", "W_15", };
static const char m_name[][4] = {"m_0", "m_1", "m_2", "m_3", "m_4", "m_5", "m_6", "m_7", };

static void riscv__translate_init(void) {
	for(int i = 0; i < 8; ++i) {
		H[i] = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState,H[i]), H_name[i]);
	}
	for(int i = 0; i < 16; ++i) {
		W[i] = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState,W[i]), W_name[i]);
	}
	bytePos = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, bytePos), "bytePos");
	dataID = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, dataID), "dataID");
	dataOut = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, dataOut), "dataOut");
	inBytes = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, inBytes), "inBytes");
	for(int i = 0; i < 8; ++i) {
		m[i] = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState,m[i]), m_name[i]);
	}
	memAddr = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, memAddr), "memAddr");
	memAddrOut = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, memAddrOut), "memAddrOut");
	numBytes = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, numBytes), "numBytes");
	numBytesOut = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, numBytesOut), "numBytesOut");
	opOut = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, opOut), "opOut");
	padState = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, padState), "padState");
	pidx = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, pidx), "pidx");
	state = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, state), "state");
	tmpWord = tcg_global_mem_new(tcg_env, offsetof(CPURISCVState, tmpWord), "tmpWord");
}

static void convBigEndianWithStringTerminationPadding(DisasContext *ctx, TCGv r0, TCGv a0);
static void createPaddedInput(DisasContext *ctx, TCGv r0, TCGv a0);
static void loadData(DisasContext *ctx, TCGv r0, TCGv a0);

static void convBigEndianWithStringTerminationPadding(DisasContext *ctx, TCGv r0, TCGv a0) {
	TCGv tmp1 = tcg_temp_local_new();
	TCGv tmp2 = tcg_temp_local_new();
	TCGv tmp3 = tcg_temp_local_new();
	TCGv tmp4 = tcg_temp_local_new();
	TCGv tmp5 = tcg_temp_local_new();
	TCGv tmp6 = tcg_temp_local_new();
	TCGv a1 = tcg_temp_local_new();
	TCGv a2 = tcg_temp_local_new();
	TCGv a3 = tcg_temp_local_new();
	TCGv a4 = tcg_temp_local_new();
	TCGv a5 = tcg_temp_local_new();
	TCGv a6 = tcg_temp_local_new();
	TCGv a7 = tcg_temp_local_new();

	TCGLabel *label_BB0_1 = gen_new_label();
	TCGLabel *label_BB0_2 = gen_new_label();
	TCGLabel *label_BB0_3 = gen_new_label();
	TCGLabel *label_BB0_4 = gen_new_label();
	TCGLabel *label_BB0_5 = gen_new_label();
	TCGLabel *label_BB0_6 = gen_new_label();
	TCGLabel *label_BB0_7 = gen_new_label();
	TCGLabel *label_BB0_8 = gen_new_label();
	TCGLabel *label_BB0_9 = gen_new_label();
	TCGLabel *label_BB0_10 = gen_new_label();
	TCGLabel *label_BB0_11 = gen_new_label();
	TCGLabel *label_BB0_12 = gen_new_label();
	TCGLabel *label_BB0_13 = gen_new_label();
	TCGLabel *label_BB0_14 = gen_new_label();
	TCGLabel *label_BB0_15 = gen_new_label();
	TCGLabel *label_BB0_16 = gen_new_label();

	TCGv sp[6]; for(int i = 0; i < 6; ++i){ sp[i] = tcg_temp_local_new(); }

	tcg_gen_mov_tl(sp[5], a0);
	tcg_gen_movi_tl(tmp1, 0);
	tcg_gen_mov_tl(sp[4], tmp1);
	tcg_gen_mov_tl(sp[3], tmp1);
	tcg_gen_mov_tl(sp[2], tmp1);
	tcg_gen_mov_tl(sp[1], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_1);
	
	gen_set_label(label_BB0_1);
	tcg_gen_mov_tl(tmp1, sp[1]);
	tcg_gen_brcondi_tl(TCG_COND_GT, tmp1, 3, label_BB0_13);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_2);
	
	gen_set_label(label_BB0_2);
	tcg_gen_mov_tl(tmp1, sp[5]);
	tcg_gen_mov_tl(tmp2, sp[1]);
	tcg_gen_shli_tl(tmp2, tmp2, 3);
	tcg_gen_shr_tl(tmp1, tmp1, tmp2);
	tcg_gen_andi_tl(tmp1, tmp1, 255);
	tcg_gen_mov_tl(sp[0], tmp1);
	tcg_gen_mov_tl(tmp1, sp[3]);
	tcg_gen_shli_tl(tmp1, tmp1, 8);
	tcg_gen_mov_tl(tmp2, sp[4]);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp2, 0, label_BB0_4);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_3);
	
	gen_set_label(label_BB0_3);
	tcg_gen_movi_tl(tmp2, 0);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_8);
	
	gen_set_label(label_BB0_4);
	tcg_gen_mov_tl(tmp2, sp[0]);
	tcg_gen_brcondi_tl(TCG_COND_NE, tmp2, 0, label_BB0_6);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_5);
	
	gen_set_label(label_BB0_5);
	tcg_gen_movi_tl(tmp2, 128);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_7);
	
	gen_set_label(label_BB0_6);
	tcg_gen_mov_tl(tmp2, sp[0]);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_7);
	
	gen_set_label(label_BB0_7);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_8);
	
	gen_set_label(label_BB0_8);
	tcg_gen_or_tl(tmp1, tmp1, tmp2);
	tcg_gen_mov_tl(sp[3], tmp1);
	tcg_gen_mov_tl(tmp1, sp[4]);
	tcg_gen_brcondi_tl(TCG_COND_NE, tmp1, 0, label_BB0_11);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_9);
	
	gen_set_label(label_BB0_9);
	tcg_gen_mov_tl(tmp1, sp[0]);
	tcg_gen_brcondi_tl(TCG_COND_NE, tmp1, 0, label_BB0_11);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_10);
	
	gen_set_label(label_BB0_10);
	tcg_gen_mov_tl(tmp1, sp[1]);
	tcg_gen_mov_tl(tmp2, sp[2]);
	tcg_gen_add_tl(tmp1, tmp2, tmp1);
	tcg_gen_mov_tl(sp[2], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_11);
	
	gen_set_label(label_BB0_11);
	tcg_gen_mov_tl(tmp1, sp[0]);
	tcg_gen_setcondi_tl(EQ, tmp1, tmp1, 0);
	tcg_gen_andi_tl(tmp1, tmp1, 1);
	tcg_gen_mov_tl(tmp2, sp[4]);
	tcg_gen_or_tl(tmp1, tmp2, tmp1);
	tcg_gen_mov_tl(sp[4], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_12);
	
	gen_set_label(label_BB0_12);
	tcg_gen_mov_tl(tmp1, sp[1]);
	tcg_gen_addi_tl(tmp1, tmp1, 1);
	tcg_gen_mov_tl(sp[1], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_1);
	
	gen_set_label(label_BB0_13);
	tcg_gen_mov_tl(tmp1, sp[4]);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp1, 0, label_BB0_15);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_14);
	
	gen_set_label(label_BB0_14);
	/*Assign padState to tmp1.*/
	tcg_gen_movi_tl(tmp2, 1);
	tcg_gen_mov_tl(padState, tmp2);
	tcg_gen_mov_tl(tmp1, sp[2]);
	/*Assign inBytes to tmp2.*/
	tcg_gen_mov_tl(tmp3, inBytes);
	tcg_gen_add_tl(tmp1, tmp3, tmp1);
	tcg_gen_mov_tl(inBytes, tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_16);
	
	gen_set_label(label_BB0_15);
	/*Assign inBytes to tmp1.*/
	tcg_gen_mov_tl(tmp2, inBytes);
	tcg_gen_addi_tl(tmp2, tmp2, 4);
	tcg_gen_mov_tl(inBytes, tmp2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB0_16);
	
	gen_set_label(label_BB0_16);
	tcg_gen_mov_tl(r0, sp[3]);
}

static void createPaddedInput(DisasContext *ctx, TCGv r0, TCGv a0) {
	TCGv tmp1 = tcg_temp_local_new();
	TCGv tmp2 = tcg_temp_local_new();
	TCGv tmp3 = tcg_temp_local_new();
	TCGv tmp4 = tcg_temp_local_new();
	TCGv tmp5 = tcg_temp_local_new();
	TCGv tmp6 = tcg_temp_local_new();
	TCGv a1 = tcg_temp_local_new();
	TCGv a2 = tcg_temp_local_new();
	TCGv a3 = tcg_temp_local_new();
	TCGv a4 = tcg_temp_local_new();
	TCGv a5 = tcg_temp_local_new();
	TCGv a6 = tcg_temp_local_new();
	TCGv a7 = tcg_temp_local_new();

	TCGLabel *label_BB1_1 = gen_new_label();
	TCGLabel *label_BB1_2 = gen_new_label();
	TCGLabel *label_BB1_3 = gen_new_label();
	TCGLabel *label_BB1_4 = gen_new_label();
	TCGLabel *label_BB1_5 = gen_new_label();
	TCGLabel *label_BB1_6 = gen_new_label();
	TCGLabel *label_BB1_7 = gen_new_label();
	TCGLabel *label_BB1_8 = gen_new_label();
	TCGLabel *label_BB1_9 = gen_new_label();

	TCGv sp[4]; for(int i = 0; i < 4; ++i){ sp[i] = tcg_temp_local_new(); }

	tcg_gen_mov_tl(sp[3], ra);
	tcg_gen_mov_tl(sp[2], a0);
	/*Assign pidx to tmp1.*/
	tcg_gen_mov_tl(tmp1, pidx);
	tcg_gen_setcondi_tl(EQ, tmp1, tmp1, 15);
	tcg_gen_andi_tl(tmp1, tmp1, 1);
	tcg_gen_mov_tl(sp[0], tmp1);
	/*Assign padState to tmp1.*/
	tcg_gen_mov_tl(tmp1, padState);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp1, 0, label_BB1_5);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_1);
	
	gen_set_label(label_BB1_1);
	tcg_gen_mov_tl(tmp1, sp[0]);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp1, 0, label_BB1_3);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_2);
	
	gen_set_label(label_BB1_2);
	/*Assign inBytes to tmp1.*/
	tcg_gen_mov_tl(tmp1, inBytes);
	tcg_gen_shli_tl(tmp1, tmp1, 3);
	tcg_gen_mov_tl(sp[1], tmp1);
	/*Assign padState to tmp1.*/
	tcg_gen_movi_tl(tmp2, 2);
	tcg_gen_mov_tl(padState, tmp2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_4);
	
	gen_set_label(label_BB1_3);
	tcg_gen_movi_tl(tmp1, 0);
	tcg_gen_mov_tl(sp[1], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_4);
	
	gen_set_label(label_BB1_4);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_6);
	
	gen_set_label(label_BB1_5);
	tcg_gen_mov_tl(a0, sp[2]);
	convBigEndianWithStringTerminationPadding(ctx, r0, a0);
	tcg_gen_mov_tl(sp[1], r0);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_6);
	
	gen_set_label(label_BB1_6);
	tcg_gen_mov_tl(tmp1, sp[1]);
	/*Assign pidx to tmp2.*/
	tcg_gen_mov_tl(tmp2, pidx);
	tcg_gen_shli_tl(tmp2, tmp2, 2);
	/*Assign W to tmp3.*/
	/*Assign W[tmp2] to tmp2.*/

	/*ARRAY ACCESS*/
	tcg_gen_sari_tl(tmp2, tmp2, 2);
	STORE_ARRAY(ctx, W, 16, tmp2, tmp1);
	tcg_gen_shli_tl(tmp2, tmp2, 2);
	/*End ARRAY ACCESS*/

	tcg_gen_mov_tl(tmp1, sp[0]);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp1, 0, label_BB1_8);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_7);
	
	gen_set_label(label_BB1_7);
	tcg_gen_movi_tl(tmp1, 0);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_9);
	
	gen_set_label(label_BB1_8);
	/*Assign pidx to tmp1.*/
	tcg_gen_mov_tl(tmp1, pidx);
	tcg_gen_addi_tl(tmp1, tmp1, 1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB1_9);
	
	gen_set_label(label_BB1_9);
	/*Assign pidx to tmp2.*/
	tcg_gen_mov_tl(pidx, tmp1);
	tcg_gen_mov_tl(r0, sp[0]);
}

static void loadData(DisasContext *ctx, TCGv r0, TCGv a0) {
	TCGv tmp1 = tcg_temp_local_new();
	TCGv tmp2 = tcg_temp_local_new();
	TCGv tmp3 = tcg_temp_local_new();
	TCGv tmp4 = tcg_temp_local_new();
	TCGv tmp5 = tcg_temp_local_new();
	TCGv tmp6 = tcg_temp_local_new();
	TCGv a1 = tcg_temp_local_new();
	TCGv a2 = tcg_temp_local_new();
	TCGv a3 = tcg_temp_local_new();
	TCGv a4 = tcg_temp_local_new();
	TCGv a5 = tcg_temp_local_new();
	TCGv a6 = tcg_temp_local_new();
	TCGv a7 = tcg_temp_local_new();

	TCGLabel *label_BB2_1 = gen_new_label();
	TCGLabel *label_BB2_2 = gen_new_label();
	TCGLabel *label_BB2_3 = gen_new_label();
	TCGLabel *label_BB2_4 = gen_new_label();
	TCGLabel *label_BB2_5 = gen_new_label();
	TCGLabel *label_BB2_6 = gen_new_label();
	TCGLabel *label_BB2_7 = gen_new_label();
	TCGLabel *label_BB2_8 = gen_new_label();
	TCGLabel *label_BB2_9 = gen_new_label();
	TCGLabel *label_BB2_10 = gen_new_label();
	TCGLabel *label_BB2_11 = gen_new_label();
	TCGLabel *label_BB2_12 = gen_new_label();
	TCGLabel *label_BB2_13 = gen_new_label();
	TCGLabel *label_BB2_14 = gen_new_label();
	TCGLabel *label_BB2_15 = gen_new_label();
	TCGLabel *label_BB2_16 = gen_new_label();
	TCGLabel *label_BB2_17 = gen_new_label();
	TCGLabel *label_BB2_19 = gen_new_label();
	TCGLabel *label_BB2_20 = gen_new_label();

	TCGv sp[8]; for(int i = 0; i < 8; ++i){ sp[i] = tcg_temp_local_new(); }

	tcg_gen_mov_tl(sp[7], ra);
	tcg_gen_mov_tl(sp[6], a0);
	tcg_gen_movi_tl(tmp1, 0);
	tcg_gen_mov_tl(sp[5], tmp1);
	/*Assign state to tmp1.*/
	tcg_gen_mov_tl(tmp1, state);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp1, 0, label_BB2_15);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_1);
	
	gen_set_label(label_BB2_1);
	/*Assign numBytes to tmp1.*/
	tcg_gen_mov_tl(tmp1, numBytes);
	tcg_gen_brcondi_tl(TCG_COND_NE, tmp1, 1, label_BB2_3);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_2);
	
	gen_set_label(label_BB2_2);
	/*Assign tmpWord to tmp1.*/
	tcg_gen_mov_tl(tmp2, tmpWord);
	tcg_gen_shri_tl(tmp2, tmp2, 8);
	tcg_gen_mov_tl(tmp3, sp[6]);
	tcg_gen_shli_tl(tmp3, tmp3, 24);
	tcg_gen_or_tl(tmp2, tmp2, tmp3);
	tcg_gen_mov_tl(tmpWord, tmp2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_14);
	
	gen_set_label(label_BB2_3);
	/*Assign bytePos to tmp1.*/
	tcg_gen_mov_tl(tmp2, bytePos);
	tcg_gen_shli_tl(tmp2, tmp2, 3);
	tcg_gen_mov_tl(sp[4], tmp2);
	tcg_gen_mov_tl(tmp2, bytePos);
	tcg_gen_movi_tl(tmp3, 4);
	tcg_gen_sub_tl(tmp2, tmp3, tmp2);
	tcg_gen_shli_tl(tmp2, tmp2, 3);
	tcg_gen_mov_tl(sp[3], tmp2);
	tcg_gen_mov_tl(tmp1, bytePos);
	tcg_gen_brcondi_tl(TCG_COND_NE, tmp1, 0, label_BB2_5);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_4);
	
	gen_set_label(label_BB2_4);
	tcg_gen_mov_tl(tmp1, sp[6]);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_6);
	
	gen_set_label(label_BB2_5);
	/*Assign tmpWord to tmp1.*/
	tcg_gen_mov_tl(tmp1, tmpWord);
	tcg_gen_mov_tl(tmp2, sp[4]);
	tcg_gen_shr_tl(tmp1, tmp1, tmp2);
	tcg_gen_mov_tl(tmp2, sp[6]);
	tcg_gen_mov_tl(tmp3, sp[3]);
	tcg_gen_shl_tl(tmp2, tmp2, tmp3);
	tcg_gen_or_tl(tmp1, tmp1, tmp2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_6);
	
	gen_set_label(label_BB2_6);
	tcg_gen_mov_tl(sp[2], tmp1);
	tcg_gen_mov_tl(tmp1, sp[6]);
	/*Assign tmpWord to tmp2.*/
	tcg_gen_mov_tl(tmpWord, tmp1);
	/*Assign dataID to tmp1.*/
	tcg_gen_mov_tl(tmp1, dataID);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp1, 0, label_BB2_8);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_7);
	
	gen_set_label(label_BB2_7);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp1, 1, label_BB2_9);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_12);
	
	gen_set_label(label_BB2_8);
	tcg_gen_mov_tl(tmp1, sp[2]);
	/*Assign pidx to tmp2.*/
	tcg_gen_mov_tl(tmp3, pidx);
	tcg_gen_addi_tl(tmp4, tmp3, 1);
	tcg_gen_mov_tl(pidx, tmp4);
	tcg_gen_shli_tl(tmp2, tmp3, 2);
	/*Assign H to tmp3.*/
	/*Assign H[tmp2] to tmp2.*/

	/*ARRAY ACCESS*/
	tcg_gen_sari_tl(tmp2, tmp2, 2);
	STORE_ARRAY(ctx, H, 8, tmp2, tmp1);
	tcg_gen_shli_tl(tmp2, tmp2, 2);
	/*End ARRAY ACCESS*/

	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_13);
	
	gen_set_label(label_BB2_9);
	tcg_gen_mov_tl(a0, sp[2]);
	createPaddedInput(ctx, r0, a0);
	tcg_gen_brcondi_tl(TCG_COND_EQ, r0, 0, label_BB2_11);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_10);
	
	gen_set_label(label_BB2_10);
	tcg_gen_movi_tl(tmp1, 1);
	tcg_gen_mov_tl(sp[5], tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_11);
	
	gen_set_label(label_BB2_11);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_13);
	
	gen_set_label(label_BB2_12);
	tcg_gen_mov_tl(tmp1, sp[2]);
	/*Assign pidx to tmp2.*/
	tcg_gen_mov_tl(tmp3, pidx);
	tcg_gen_addi_tl(tmp4, tmp3, 1);
	tcg_gen_mov_tl(pidx, tmp4);
	tcg_gen_shli_tl(tmp2, tmp3, 2);
	/*Assign m to tmp3.*/
	/*Assign m[tmp2] to tmp2.*/

	/*ARRAY ACCESS*/
	tcg_gen_sari_tl(tmp2, tmp2, 2);
	STORE_ARRAY(ctx, m, 8, tmp2, tmp1);
	tcg_gen_shli_tl(tmp2, tmp2, 2);
	/*End ARRAY ACCESS*/

	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_13);
	
	gen_set_label(label_BB2_13);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_14);
	
	gen_set_label(label_BB2_14);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_15);
	
	gen_set_label(label_BB2_15);
	tcg_gen_mov_tl(tmp1, sp[5]);
	tcg_gen_andi_tl(tmp1, tmp1, 1);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp1, 0, label_BB2_17);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_16);
	
	gen_set_label(label_BB2_16);
	/*Assign dataOut to tmp1.*/
	tcg_gen_movi_tl(tmp2, 1);
	tcg_gen_mov_tl(dataOut, tmp2);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_20);
	
	gen_set_label(label_BB2_17);
	/*Assign memAddr to tmp1.*/
	tcg_gen_mov_tl(tmp2, memAddr);
	/*Assign memAddrOut to tmp3.*/
	tcg_gen_mov_tl(memAddrOut, tmp2);
	tcg_gen_mov_tl(tmp2, memAddr);
	tcg_gen_andi_tl(tmp2, tmp2, 3);
	tcg_gen_setcondi_tl(NE, tmp4, tmp2, 0);
	tcg_gen_movi_tl(tmp3, 4);
	tcg_gen_movi_tl(tmp2, 1);
	tcg_gen_movi_tl(tmp5, 0);
	tcg_gen_brcond_tl(TCG_COND_NE, tmp4, tmp5, label_BB2_19);
	tcg_gen_mov_tl(tmp2, tmp3);
	
	gen_set_label(label_BB2_19);
	/*Assign numBytesOut to tmp3.*/
	tcg_gen_mov_tl(numBytesOut, tmp2);
	tcg_gen_mov_tl(tmp2, numBytesOut);
	tcg_gen_mov_tl(tmp4, memAddr);
	tcg_gen_add_tl(tmp2, tmp4, tmp2);
	tcg_gen_mov_tl(memAddr, tmp2);
	/*Assign opOut to tmp1.*/
	tcg_gen_movi_tl(tmp2, 6);
	tcg_gen_mov_tl(opOut, tmp2);
	tcg_gen_mov_tl(tmp1, numBytesOut);
	/*Assign numBytes to tmp2.*/
	tcg_gen_mov_tl(numBytes, tmp1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label_BB2_20);
	
	gen_set_label(label_BB2_20);
	tcg_gen_mov_tl(tmp1, sp[5]);
	tcg_gen_xori_tl(tmp1, tmp1, -1);
	tcg_gen_andi_tl(tmp1, tmp1, 1);
	/*Assign state to tmp2.*/
	tcg_gen_mov_tl(state, tmp1);
	tcg_gen_mov_tl(tmp1, sp[5]);
	tcg_gen_andi_tl(r0, tmp1, 1);
}

static bool trans_loadata(DisasContext *ctx, arg_loadata *a) {
	TCGv ready = tcg_temp_local_new();

	tcg_gen_movi_tl(tmp0, 0);
	tcg_gen_mov_tl(ready, tmp0);
	tcg_gen_setcondi_tl(TCG_COND_GT, tmp0, ready, 1);
	tcg_gen_mov_tl(ready, tmp0);
	tcg_gen_setcondi_tl(TCG_COND_GT, tmp0, ready, 1);
	tcg_gen_mov_tl(tmp1, ready);
	LOGICAL_AND(tmp2, tmp0, tmp1);
	tcg_gen_mov_tl(ready, tmp2);
	tcg_gen_mov_tl(a0, memLoadDataIn);
	loadData(rd, a0);
	tcg_gen_mov_tl(tmp0, rd);
	tcg_gen_mov_tl(ready, tmp0);

	gen_set_label(label0);
	tcg_gen_setcondi_tl(TCG_COND_NE, tmp0, ready, 0);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp0, 0, label1);

	tcg_gen_movi_tl(tmp0, 0);
	tcg_gen_mov_tl(dataOut, tmp0);
	tcg_gen_mov_tl(a0, memLoadDataIn);
	loadData(rd, a0);
	tcg_gen_mov_tl(tmp0, rd);
	tcg_gen_mov_tl(ready, tmp0);
	tcg_gen_setcondi_tl(TCG_COND_EQ, tmp0, opOut, 6);
	tcg_gen_brcondi_tl(TCG_COND_EQ, tmp0, 0, label2);

	gen_set_label(label2);

	gen_set_label(label1);
	tcg_gen_brcondi_tl(TCG_COND_ALWAYS, ctx->zero, 0, label0);
	tcg_gen_mov_tl(tmp0, ready);
	tcg_gen_mov_tl(rd, tmp0);
	return true;
}
